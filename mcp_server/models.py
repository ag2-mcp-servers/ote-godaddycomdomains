# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T08:11:32+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, ConfigDict, EmailStr, Field, RootModel, conint, constr


class Origination(Enum):
    USER = 'USER'
    SYSTEM = 'SYSTEM'


class Status(Enum):
    ACCEPTED = 'ACCEPTED'
    AWAITING = 'AWAITING'
    CANCELLED = 'CANCELLED'
    FAILED = 'FAILED'
    PENDING = 'PENDING'
    SUCCESS = 'SUCCESS'


class Type(Enum):
    AUTH_CODE_PURCHASE = 'AUTH_CODE_PURCHASE'
    AUTH_CODE_REGENERATE = 'AUTH_CODE_REGENERATE'
    AUTO_RENEWAL = 'AUTO_RENEWAL'
    BACKORDER_PURCHASE = 'BACKORDER_PURCHASE'
    BACKORDER_DELETE = 'BACKORDER_DELETE'
    BACKORDER_UPDATE = 'BACKORDER_UPDATE'
    CONTACT_CREATE = 'CONTACT_CREATE'
    CONTACT_DELETE = 'CONTACT_DELETE'
    CONTACT_UPDATE = 'CONTACT_UPDATE'
    DNS_VERIFICATION = 'DNS_VERIFICATION'
    DNSSEC_CREATE = 'DNSSEC_CREATE'
    DNSSEC_DELETE = 'DNSSEC_DELETE'
    DOMAIN_DELETE = 'DOMAIN_DELETE'
    DOMAIN_UPDATE = 'DOMAIN_UPDATE'
    DOMAIN_UPDATE_CONTACTS = 'DOMAIN_UPDATE_CONTACTS'
    DOMAIN_UPDATE_NAME_SERVERS = 'DOMAIN_UPDATE_NAME_SERVERS'
    EXPIRY = 'EXPIRY'
    HOST_CREATE = 'HOST_CREATE'
    HOST_DELETE = 'HOST_DELETE'
    ICANN_VERIFICATION = 'ICANN_VERIFICATION'
    MIGRATE = 'MIGRATE'
    MIGRATE_IN = 'MIGRATE_IN'
    PREMIUM = 'PREMIUM'
    PRIVACY_PURCHASE = 'PRIVACY_PURCHASE'
    PRIVACY_DELETE = 'PRIVACY_DELETE'
    REDEEM = 'REDEEM'
    REGISTER = 'REGISTER'
    RENEW = 'RENEW'
    RENEW_UNDO = 'RENEW_UNDO'
    TRADE = 'TRADE'
    TRADE_CANCEL = 'TRADE_CANCEL'
    TRADE_PURCHASE = 'TRADE_PURCHASE'
    TRADE_PURCHASE_AUTH_TEXT_MESSAGE = 'TRADE_PURCHASE_AUTH_TEXT_MESSAGE'
    TRADE_RESEND_AUTH_EMAIL = 'TRADE_RESEND_AUTH_EMAIL'
    TRANSFER = 'TRANSFER'
    TRANSFER_IN = 'TRANSFER_IN'
    TRANSFER_IN_CANCEL = 'TRANSFER_IN_CANCEL'
    TRANSFER_OUT = 'TRANSFER_OUT'
    TRANSFER_OUT_ACCEPT = 'TRANSFER_OUT_ACCEPT'
    TRANSFER_OUT_REJECT = 'TRANSFER_OUT_REJECT'
    TRANSFER_OUT_REQUESTED = 'TRANSFER_OUT_REQUESTED'
    TRANSIT = 'TRANSIT'


class Country(Enum):
    AC = 'AC'
    AD = 'AD'
    AE = 'AE'
    AF = 'AF'
    AG = 'AG'
    AI = 'AI'
    AL = 'AL'
    AM = 'AM'
    AO = 'AO'
    AQ = 'AQ'
    AR = 'AR'
    AS = 'AS'
    AT = 'AT'
    AU = 'AU'
    AW = 'AW'
    AX = 'AX'
    AZ = 'AZ'
    BA = 'BA'
    BB = 'BB'
    BD = 'BD'
    BE = 'BE'
    BF = 'BF'
    BG = 'BG'
    BH = 'BH'
    BI = 'BI'
    BJ = 'BJ'
    BM = 'BM'
    BN = 'BN'
    BO = 'BO'
    BQ = 'BQ'
    BR = 'BR'
    BS = 'BS'
    BT = 'BT'
    BV = 'BV'
    BW = 'BW'
    BY = 'BY'
    BZ = 'BZ'
    CA = 'CA'
    CC = 'CC'
    CD = 'CD'
    CF = 'CF'
    CG = 'CG'
    CH = 'CH'
    CI = 'CI'
    CK = 'CK'
    CL = 'CL'
    CM = 'CM'
    CN = 'CN'
    CO = 'CO'
    CR = 'CR'
    CV = 'CV'
    CW = 'CW'
    CX = 'CX'
    CY = 'CY'
    CZ = 'CZ'
    DE = 'DE'
    DJ = 'DJ'
    DK = 'DK'
    DM = 'DM'
    DO = 'DO'
    DZ = 'DZ'
    EC = 'EC'
    EE = 'EE'
    EG = 'EG'
    EH = 'EH'
    ER = 'ER'
    ES = 'ES'
    ET = 'ET'
    FI = 'FI'
    FJ = 'FJ'
    FK = 'FK'
    FM = 'FM'
    FO = 'FO'
    FR = 'FR'
    GA = 'GA'
    GB = 'GB'
    GD = 'GD'
    GE = 'GE'
    GF = 'GF'
    GG = 'GG'
    GH = 'GH'
    GI = 'GI'
    GL = 'GL'
    GM = 'GM'
    GN = 'GN'
    GP = 'GP'
    GQ = 'GQ'
    GR = 'GR'
    GS = 'GS'
    GT = 'GT'
    GU = 'GU'
    GW = 'GW'
    GY = 'GY'
    HK = 'HK'
    HM = 'HM'
    HN = 'HN'
    HR = 'HR'
    HT = 'HT'
    HU = 'HU'
    ID = 'ID'
    IE = 'IE'
    IL = 'IL'
    IM = 'IM'
    IN = 'IN'
    IO = 'IO'
    IQ = 'IQ'
    IS = 'IS'
    IT = 'IT'
    JE = 'JE'
    JM = 'JM'
    JO = 'JO'
    JP = 'JP'
    KE = 'KE'
    KG = 'KG'
    KH = 'KH'
    KI = 'KI'
    KM = 'KM'
    KN = 'KN'
    KR = 'KR'
    KV = 'KV'
    KW = 'KW'
    KY = 'KY'
    KZ = 'KZ'
    LA = 'LA'
    LB = 'LB'
    LC = 'LC'
    LI = 'LI'
    LK = 'LK'
    LR = 'LR'
    LS = 'LS'
    LT = 'LT'
    LU = 'LU'
    LV = 'LV'
    LY = 'LY'
    MA = 'MA'
    MC = 'MC'
    MD = 'MD'
    ME = 'ME'
    MG = 'MG'
    MH = 'MH'
    MK = 'MK'
    ML = 'ML'
    MM = 'MM'
    MN = 'MN'
    MO = 'MO'
    MP = 'MP'
    MQ = 'MQ'
    MR = 'MR'
    MS = 'MS'
    MT = 'MT'
    MU = 'MU'
    MV = 'MV'
    MW = 'MW'
    MX = 'MX'
    MY = 'MY'
    MZ = 'MZ'
    NA = 'NA'
    NC = 'NC'
    NE = 'NE'
    NF = 'NF'
    NG = 'NG'
    NI = 'NI'
    NL = 'NL'
    NO = 'NO'
    NP = 'NP'
    NR = 'NR'
    NU = 'NU'
    NZ = 'NZ'
    OM = 'OM'
    PA = 'PA'
    PE = 'PE'
    PF = 'PF'
    PG = 'PG'
    PH = 'PH'
    PK = 'PK'
    PL = 'PL'
    PM = 'PM'
    PN = 'PN'
    PR = 'PR'
    PS = 'PS'
    PT = 'PT'
    PW = 'PW'
    PY = 'PY'
    QA = 'QA'
    RE = 'RE'
    RO = 'RO'
    RS = 'RS'
    RU = 'RU'
    RW = 'RW'
    SA = 'SA'
    SB = 'SB'
    SC = 'SC'
    SE = 'SE'
    SG = 'SG'
    SH = 'SH'
    SI = 'SI'
    SJ = 'SJ'
    SK = 'SK'
    SL = 'SL'
    SM = 'SM'
    SN = 'SN'
    SO = 'SO'
    SR = 'SR'
    ST = 'ST'
    SV = 'SV'
    SX = 'SX'
    SZ = 'SZ'
    TC = 'TC'
    TD = 'TD'
    TF = 'TF'
    TG = 'TG'
    TH = 'TH'
    TJ = 'TJ'
    TK = 'TK'
    TL = 'TL'
    TM = 'TM'
    TN = 'TN'
    TO = 'TO'
    TP = 'TP'
    TR = 'TR'
    TT = 'TT'
    TV = 'TV'
    TW = 'TW'
    TZ = 'TZ'
    UA = 'UA'
    UG = 'UG'
    UM = 'UM'
    US = 'US'
    UY = 'UY'
    UZ = 'UZ'
    VA = 'VA'
    VC = 'VC'
    VE = 'VE'
    VG = 'VG'
    VI = 'VI'
    VN = 'VN'
    VU = 'VU'
    WF = 'WF'
    WS = 'WS'
    YE = 'YE'
    YT = 'YT'
    ZA = 'ZA'
    ZM = 'ZM'
    ZW = 'ZW'


class Address(BaseModel):
    address1: str
    address2: Optional[str] = None
    city: str
    country: Country = Field(
        ...,
        description="Two-letter ISO country code to be used as a hint for target region<br/><br/>\nNOTE: These are sample values, there are many\n<a href='http://www.iso.org/iso/country_codes.htm'>more</a>",
    )
    postalCode: str = Field(..., description='Postal or zip code')
    state: str = Field(..., description='State or province or territory')


class Consent(BaseModel):
    agreedAt: str = Field(
        ...,
        description='Timestamp indicating when the end-user consented to these legal agreements',
    )
    agreedBy: str = Field(
        ...,
        description="Originating client IP address of the end-user's computer when they consented to these legal agreements",
    )
    agreementKeys: List[str] = Field(
        ...,
        description='Unique identifiers of the legal agreements to which the end-user has agreed, as returned from the/domains/agreements endpoint',
    )


class AgreementKey(Enum):
    EXPOSE_WHOIS = 'EXPOSE_WHOIS'


class ConsentDomainUpdate(BaseModel):
    agreedAt: str = Field(
        ...,
        description='Timestamp indicating when the end-user consented to these agreements',
    )
    agreedBy: str = Field(
        ...,
        description="Originating client IP address of the end-user's computer when they consented to the agreements",
    )
    agreementKeys: List[AgreementKey] = Field(
        ...,
        description="Unique identifiers of the agreements to which the end-user has agreed, as required by the elements being updated<br/><ul><li><strong style='margin-left: 12px;'>EXPOSE_WHOIS</strong> - Required when the exposeWhois field is updated to true</li></ul>",
    )


class ConsentRedemption(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    agreedAt: str = Field(
        ...,
        description='Timestamp indicating when the end-user consented to these legal agreements',
    )
    agreedBy: str = Field(
        ...,
        description="Originating client IP address of the end-user's computer when they consented to these legal agreements",
    )
    currency: constr(pattern=r'^[A-Z][A-Z][A-Z]$') = Field(
        ..., description='Currency in which the `price` and `fee` are listed'
    )
    fee: int = Field(
        ...,
        description='Fee charged for the domain redemption. Please use GET /v2/customers/{customerId}/domains/{domain} to retrieve the redemption fee and currency for the domain',
    )
    price: int = Field(
        ...,
        description='Price for the domain renewal (if domain renewal required for redemption). Please use GET /v2/customers/{customerId}/domains/{domain} to retrieve the redemption price and currency for the domain',
    )


class Contact(BaseModel):
    addressMailing: Address
    email: EmailStr
    fax: Optional[str] = None
    jobTitle: Optional[str] = None
    nameFirst: str
    nameLast: str
    nameMiddle: Optional[str] = None
    organization: Optional[str] = None
    phone: str


class Encoding(Enum):
    ASCII = 'ASCII'
    UTF_8 = 'UTF-8'


class ContactDomain(BaseModel):
    field_createdAt: Optional[str] = Field(
        None,
        alias='_createdAt',
        description='Timestamp indicating when the contact was created',
    )
    field_deleted: Optional[bool] = Field(
        None,
        alias='_deleted',
        description='Flag indicating if the contact has been logically deleted in the system',
    )
    field_modifiedAt: Optional[str] = Field(
        None,
        alias='_modifiedAt',
        description='Timestamp indicating when the contact was last modified',
    )
    field_revision: Optional[int] = Field(
        None,
        alias='_revision',
        description='The current revision number of the contact.',
    )
    addressMailing: Address
    contactId: Optional[str] = Field(
        None, description='Unique identifier for this Contact'
    )
    email: EmailStr
    encoding: Optional[Encoding] = Field(
        'ASCII',
        description="The encoding of the contact data<br/><ul><li><strong style='margin-left: 12px;'>ASCII</strong> - Data contains only ASCII characters that are not region or language specific</li><li><strong style='margin-left: 12px;'>UTF-8</strong> - Data contains characters that are specific to a region or language</li></ul>",
    )
    exposeWhois: bool = Field(
        ...,
        description='Whether or not the contact details should be shown in the WHOIS',
    )
    fax: Optional[constr(max_length=17)] = None
    jobTitle: Optional[str] = None
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description='The contact eligibility data fields as specified by GET /v2/customers/{customerId}/domains/contacts/schema/{tld}',
    )
    nameFirst: constr(max_length=30)
    nameLast: constr(max_length=30)
    nameMiddle: Optional[str] = None
    organization: Optional[constr(max_length=100)] = None
    phone: constr(max_length=17)
    tlds: Optional[List[str]] = Field(
        None, description='The tlds that this contact can be assigned to'
    )


class Type1(Enum):
    A = 'A'
    AAAA = 'AAAA'
    CNAME = 'CNAME'
    MX = 'MX'
    NS = 'NS'
    SOA = 'SOA'
    SRV = 'SRV'
    TXT = 'TXT'


class DNSRecord(BaseModel):
    data: str
    name: str
    port: Optional[conint(ge=1, le=65535)] = Field(
        None, description='Service port (SRV only)'
    )
    priority: Optional[int] = Field(
        None, description='Record priority (MX and SRV only)'
    )
    protocol: Optional[str] = Field(None, description='Service protocol (SRV only)')
    service: Optional[str] = Field(None, description='Service type (SRV only)')
    ttl: Optional[int] = None
    type: Type1
    weight: Optional[int] = Field(None, description='Record weight (SRV only)')


class DNSRecordCreateType(BaseModel):
    data: str
    name: str
    port: Optional[conint(ge=1, le=65535)] = Field(
        None, description='Service port (SRV only)'
    )
    priority: Optional[int] = Field(
        None, description='Record priority (MX and SRV only)'
    )
    protocol: Optional[str] = Field(None, description='Service protocol (SRV only)')
    service: Optional[str] = Field(None, description='Service type (SRV only)')
    ttl: Optional[int] = None
    weight: Optional[int] = Field(None, description='Record weight (SRV only)')


class DNSRecordCreateTypeName(BaseModel):
    data: str
    port: Optional[conint(ge=1, le=65535)] = Field(
        None, description='Service port (SRV only)'
    )
    priority: Optional[int] = Field(
        None, description='Record priority (MX and SRV only)'
    )
    protocol: Optional[str] = Field(None, description='Service protocol (SRV only)')
    service: Optional[str] = Field(None, description='Service type (SRV only)')
    ttl: Optional[int] = None
    weight: Optional[int] = Field(None, description='Record weight (SRV only)')


class DomainAvailableError(BaseModel):
    code: str = Field(
        ...,
        description='Short identifier for the error, suitable for indicating the specific error within client code',
    )
    domain: str = Field(..., description='Domain name')
    message: Optional[str] = Field(
        None, description='Human-readable, English description of the error'
    )
    path: str = Field(
        ...,
        description="<ul>\n<li style='margin-left: 12px;'>JSONPath referring to a field containing an error</li>\n<strong style='margin-left: 12px;'>OR</strong>\n<li style='margin-left: 12px;'>JSONPath referring to a field that refers to an object containing an error, with more detail in `pathRelated`</li>\n</ul>",
    )
    status: int = Field(
        ..., description='HTTP status code that would return for a single check'
    )


class DomainAvailableResponse(BaseModel):
    available: bool = Field(
        ..., description='Whether or not the domain name is available'
    )
    currency: Optional[str] = Field(
        'USD',
        description='Currency in which the `price` is listed. Only returned if tld is offered',
    )
    definitive: bool = Field(
        ...,
        description='Whether or not the `available` answer has been definitively verified with the registry',
    )
    domain: str = Field(..., description='Domain name')
    period: Optional[int] = Field(
        None,
        description='Number of years included in the price. Only returned if tld is offered',
    )
    price: Optional[int] = Field(
        None,
        description='Price of the domain excluding taxes or fees. Only returned if tld is offered',
    )


class DomainContacts(BaseModel):
    contactAdmin: Optional[Contact] = None
    contactBilling: Optional[Contact] = None
    contactRegistrant: Contact
    contactTech: Optional[Contact] = None


class DomainContactsV2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    admin: Optional[ContactDomain] = None
    billing: Optional[ContactDomain] = None
    registrant: Optional[ContactDomain] = None
    tech: Optional[ContactDomain] = None


class RegistryStatusCode(Enum):
    ADD_PERIOD = 'ADD_PERIOD'
    AUTO_RENEW_PERIOD = 'AUTO_RENEW_PERIOD'
    CLIENT_DELETE_PROHIBITED = 'CLIENT_DELETE_PROHIBITED'
    CLIENT_HOLD = 'CLIENT_HOLD'
    CLIENT_RENEW_PROHIBITED = 'CLIENT_RENEW_PROHIBITED'
    CLIENT_TRANSFER_PROHIBITED = 'CLIENT_TRANSFER_PROHIBITED'
    CLIENT_UPDATE_PROHIBITED = 'CLIENT_UPDATE_PROHIBITED'
    INACTIVE = 'INACTIVE'
    OK = 'OK'
    PENDING_CREATE = 'PENDING_CREATE'
    PENDING_DELETE = 'PENDING_DELETE'
    PENDING_RENEW = 'PENDING_RENEW'
    PENDING_RESTORE = 'PENDING_RESTORE'
    PENDING_TRANSFER = 'PENDING_TRANSFER'
    PENDING_UPDATE = 'PENDING_UPDATE'
    REDEMPTION_PERIOD = 'REDEMPTION_PERIOD'
    RENEW_PERIOD = 'RENEW_PERIOD'
    SERVER_DELETE_PROHIBITED = 'SERVER_DELETE_PROHIBITED'
    SERVER_HOLD = 'SERVER_HOLD'
    SERVER_RENEW_PROHIBITED = 'SERVER_RENEW_PROHIBITED'
    SERVER_TRANSFER_PROHIBITED = 'SERVER_TRANSFER_PROHIBITED'
    SERVER_UPDATE_PROHIBITED = 'SERVER_UPDATE_PROHIBITED'
    TRANSFER_PERIOD = 'TRANSFER_PERIOD'


class Status1(Enum):
    ACTIVE = 'ACTIVE'
    CANCELLED = 'CANCELLED'
    DELETED_REDEEMABLE = 'DELETED_REDEEMABLE'
    EXPIRED = 'EXPIRED'
    FAILED = 'FAILED'
    LOCKED_REGISTRAR = 'LOCKED_REGISTRAR'
    PARKED = 'PARKED'
    HELD_REGISTRAR = 'HELD_REGISTRAR'
    OWNERSHIP_CHANGED = 'OWNERSHIP_CHANGED'
    PENDING_TRANSFER = 'PENDING_TRANSFER'
    PENDING_REGISTRATION = 'PENDING_REGISTRATION'
    REPOSSESSED = 'REPOSSESSED'
    SUSPENDED = 'SUSPENDED'
    TRANSFERRED = 'TRANSFERRED'


class Algorithm(Enum):
    RSAMD5 = 'RSAMD5'
    DH = 'DH'
    DSA = 'DSA'
    RSASHA1 = 'RSASHA1'
    DSA_NSEC3_SHA1 = 'DSA_NSEC3_SHA1'
    RSASHA1_NSEC3_SHA1 = 'RSASHA1_NSEC3_SHA1'
    RSASHA256 = 'RSASHA256'
    RSASHA512 = 'RSASHA512'
    ECC_GOST = 'ECC_GOST'
    ECDSAP256SHA256 = 'ECDSAP256SHA256'
    ECDSAP384SHA384 = 'ECDSAP384SHA384'
    ED25519 = 'ED25519'
    ED448 = 'ED448'
    PRIVATEDNS = 'PRIVATEDNS'
    PRIVATEOID = 'PRIVATEOID'


class DigestType(Enum):
    SHA1 = 'SHA1'
    SHA256 = 'SHA256'
    GOST = 'GOST'
    SHA384 = 'SHA384'


class Flags(Enum):
    ZSK = 'ZSK'
    KSK = 'KSK'


class DomainDnssec(BaseModel):
    algorithm: Algorithm = Field(
        ...,
        description="This identifies the cryptographic algorithm used to generate the signature<br/><ul><li><strong style='margin-left: 12px;'>RSAMD5</strong> - [01] DRSA/MD5 </li><li><strong style='margin-left: 12px;'>DSA</strong> - [03] DSA/SHA1</li><li><strong style='margin-left: 12px;'>RSASHA1</strong> - [05] RSA/SHA-1</li><li><strong style='margin-left: 12px;'>DSA_NSEC3_SHA1</strong> - [06] DSA-NSEC3-SHA1</li><li><strong style='margin-left: 12px;'>RSASHA1_NSEC3_SHA1</strong> - [07] RSASHA1-NSEC3-SHA1</li><li><strong style='margin-left: 12px;'>RSASHA256</strong> - [08] RSA/SHA-256</li><li><strong style='margin-left: 12px;'>RSASHA512</strong> - [10] RSA/SHA-512</li><li><strong style='margin-left: 12px;'>ECC_GOST</strong> - [12] GOST R 34.10-2001</li><li><strong style='margin-left: 12px;'>ECDSAP256SHA256</strong> - [13] ECDSA Curve P-256 with SHA-256</li><li><strong style='margin-left: 12px;'>ECDSAP384SHA384</strong> - [14] ECDSA Curve P-384 with SHA-384</li><li><strong style='margin-left: 12px;'>ED25519</strong> - [15] Ed25519</li><li><strong style='margin-left: 12px;'>ED448</strong> - [16] Ed448</li></ul>",
    )
    digest: Optional[str] = Field(
        None, description='The digest is an alpha-numeric value'
    )
    digestType: Optional[DigestType] = Field(
        None,
        description="This identifies the algorithm used to construct the digest<br/><ul><li><strong style='margin-left: 12px;'>SHA1</strong> - [01] SHA-1</li><li><strong style='margin-left: 12px;'>SHA256</strong> - [02] SHA-256</li><li><strong style='margin-left: 12px;'>GOST</strong> - [03] GOST R 34.11-94</li><li><strong style='margin-left: 12px;'>SHA384</strong> - [04] SHA-384</li></ul>",
    )
    flags: Optional[Flags] = Field(
        None,
        description="This identifies the key type; either a Zone-Signing Key or a Key-Signing Key<br/><ul><li><strong style='margin-left: 12px;'>ZSK</strong> - [256] Zone-Signing Key</li><li><strong style='margin-left: 12px;'>KSK</strong> - [257] Key-Signing Key</li></ul>",
    )
    keyTag: Optional[conint(le=65536)] = Field(
        None,
        description='This is an integer value less than 65536 used to identify the DNSSEC record for the domain name.',
    )
    maxSignatureLife: Optional[int] = Field(
        None,
        description='This specifies the validity period for the signature. The value is expressed in seconds. You can use any integer value larger than zero',
    )
    publicKey: Optional[str] = Field(
        None,
        description='Registries use this value to encrypt DS records. Decryption requires a matching public key',
    )


class Type2(Enum):
    MASKED = 'MASKED'
    REDIRECT_PERMANENT = 'REDIRECT_PERMANENT'
    REDIRECT_TEMPORARY = 'REDIRECT_TEMPORARY'


class DomainForwardingMask(BaseModel):
    description: Optional[str] = Field(
        None,
        description='A short description of your website to display in search engine results.',
    )
    keywords: Optional[str] = Field(
        None,
        description='A list of comma-separated keywords that describes the content and purpose of your website.',
    )
    title: Optional[str] = Field(
        None,
        description='Displays at the top of the browser window and in search results.',
    )


class ResourceType(Enum):
    CONTACT = 'CONTACT'
    DOMAIN = 'DOMAIN'
    HOST = 'HOST'


class Status2(Enum):
    AWAITING = 'AWAITING'
    CANCELLED = 'CANCELLED'
    FAILED = 'FAILED'
    PENDING = 'PENDING'
    SUCCESS = 'SUCCESS'


class Type4(Enum):
    AUTH_CODE_PURCHASE = 'AUTH_CODE_PURCHASE'
    AUTH_CODE_REGENERATE = 'AUTH_CODE_REGENERATE'
    AUTO_RENEWAL = 'AUTO_RENEWAL'
    BACKORDER = 'BACKORDER'
    BACKORDER_PURCHASE = 'BACKORDER_PURCHASE'
    BACKORDER_DELETE = 'BACKORDER_DELETE'
    BACKORDER_UPDATE = 'BACKORDER_UPDATE'
    CONTACT_CREATE = 'CONTACT_CREATE'
    CONTACT_DELETE = 'CONTACT_DELETE'
    CONTACT_UPDATE = 'CONTACT_UPDATE'
    DNS_VERIFICATION = 'DNS_VERIFICATION'
    DNSSEC_CREATE = 'DNSSEC_CREATE'
    DNSSEC_DELETE = 'DNSSEC_DELETE'
    DOMAIN_DELETE = 'DOMAIN_DELETE'
    DOMAIN_UPDATE = 'DOMAIN_UPDATE'
    DOMAIN_UPDATE_CONTACTS = 'DOMAIN_UPDATE_CONTACTS'
    DOMAIN_UPDATE_NAME_SERVERS = 'DOMAIN_UPDATE_NAME_SERVERS'
    EXPIRY = 'EXPIRY'
    HOST_CREATE = 'HOST_CREATE'
    HOST_DELETE = 'HOST_DELETE'
    ICANN_VERIFICATION = 'ICANN_VERIFICATION'
    MIGRATE = 'MIGRATE'
    MIGRATE_IN = 'MIGRATE_IN'
    PREMIUM = 'PREMIUM'
    PRIVACY_PURCHASE = 'PRIVACY_PURCHASE'
    PRIVACY_DELETE = 'PRIVACY_DELETE'
    REDEEM = 'REDEEM'
    REGISTER = 'REGISTER'
    RENEW = 'RENEW'
    RENEW_UNDO = 'RENEW_UNDO'
    TRADE = 'TRADE'
    TRADE_CANCEL = 'TRADE_CANCEL'
    TRADE_PURCHASE = 'TRADE_PURCHASE'
    TRADE_PURCHASE_AUTH_TEXT_MESSAGE = 'TRADE_PURCHASE_AUTH_TEXT_MESSAGE'
    TRADE_RESEND_AUTH_EMAIL = 'TRADE_RESEND_AUTH_EMAIL'
    TRANSFER = 'TRANSFER'
    TRANSFER_IN = 'TRANSFER_IN'
    TRANSFER_IN_CANCEL = 'TRANSFER_IN_CANCEL'
    TRANSFER_OUT = 'TRANSFER_OUT'
    TRANSFER_OUT_ACCEPT = 'TRANSFER_OUT_ACCEPT'
    TRANSFER_OUT_REJECT = 'TRANSFER_OUT_REJECT'
    TRANSFER_OUT_REQUESTED = 'TRANSFER_OUT_REQUESTED'
    TRANSIT = 'TRANSIT'


class DomainNotification(BaseModel):
    addedAt: str = Field(..., description='The date the notification was added')
    metadata: Optional[Dict[str, Any]] = Field(
        '',
        description='The notification data for the given type as specifed by GET /v2/customers/{customerId}/domains/notifications/schema',
    )
    notificationId: str = Field(
        ...,
        description='The notification ID to be used in POST /v2/customers/{customerId}/domains/notifications to acknowledge the notification',
    )
    requestId: Optional[str] = Field(
        None,
        description='A client provided identifier (via X-Request-Id header) indicating the request this notification is for',
    )
    resource: str = Field(..., description='The resource the notification pertains to.')
    resourceType: ResourceType = Field(
        ..., description='The type of resource the notification relates to'
    )
    status: Status2 = Field(..., description='The resulting status of the action.')
    type: Type4 = Field(
        ..., description='The type of action the notification relates to'
    )


class DomainNotificationType(BaseModel):
    type: Type4 = Field(..., description='The notification type')


class DomainPurchase(BaseModel):
    consent: Consent
    contactAdmin: Optional[Contact] = None
    contactBilling: Optional[Contact] = None
    contactRegistrant: Optional[Contact] = None
    contactTech: Optional[Contact] = None
    domain: str = Field(
        ...,
        description='For internationalized domain names with non-ascii characters, the domain name is converted to punycode before format and pattern validation rules are checked',
    )
    nameServers: Optional[List[str]] = None
    period: Optional[conint(ge=1, le=10)] = 1
    privacy: Optional[bool] = False
    renewAuto: Optional[bool] = True


class DomainPurchaseResponse(BaseModel):
    currency: Optional[str] = Field(
        'USD', description='Currency in which the `total` is listed'
    )
    itemCount: int = Field(..., description='Number items included in the order')
    orderId: int = Field(
        ...,
        description='Unique identifier of the order processed to purchase the domain',
    )
    total: int = Field(
        ..., description='Total cost of the domain and any selected add-ons'
    )


class DomainRedeemV2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    consent: ConsentRedemption


class DomainRenew(BaseModel):
    period: Optional[conint(ge=1, le=10)] = Field(
        None,
        description='Number of years to extend the Domain. Must not exceed maximum for TLD. When omitted, defaults to `period` specified during original purchase',
    )


class DomainSuggestion(BaseModel):
    domain: str = Field(..., description='Suggested domain name')


class DomainSummary(BaseModel):
    authCode: Optional[str] = Field(
        None, description='Authorization code for transferring the Domain'
    )
    contactAdmin: Optional[Contact] = None
    contactBilling: Optional[Contact] = None
    contactRegistrant: Contact
    contactTech: Optional[Contact] = None
    createdAt: datetime = Field(
        ..., description='Date and time when this domain was created'
    )
    deletedAt: Optional[datetime] = Field(
        None, description='Date and time when this domain was deleted'
    )
    domain: str = Field(..., description='Name of the domain')
    domainId: float = Field(..., description='Unique identifier for this Domain')
    expirationProtected: bool = Field(
        ..., description='Whether or not the domain is protected from expiration'
    )
    expires: Optional[datetime] = Field(
        None, description='Date and time when this domain will expire'
    )
    exposeWhois: Optional[bool] = Field(
        None,
        description='Whether or not the domain contact details should be shown in the WHOIS',
    )
    holdRegistrar: bool = Field(
        ..., description='Whether or not the domain is on-hold by the registrar'
    )
    locked: bool = Field(
        ..., description='Whether or not the domain is locked to prevent transfers'
    )
    nameServers: Optional[List[str]] = Field(
        None, description='Fully-qualified domain names for DNS servers'
    )
    privacy: bool = Field(
        ..., description='Whether or not the domain has privacy protection'
    )
    registrarCreatedAt: Optional[str] = Field(
        None, description='Date and time when this domain was created by the registrar'
    )
    renewAuto: bool = Field(
        ...,
        description='Whether or not the domain is configured to automatically renew',
    )
    renewDeadline: datetime = Field(..., description='Date the domain must renew on')
    renewable: Optional[bool] = Field(
        None,
        description='Whether or not the domain is eligble for renewal based on status',
    )
    status: str = Field(
        ...,
        description="Processing status of the domain<br/><ul>\n<li><strong style='margin-left: 12px;'>ACTIVE</strong> - All is well</li>\n<li><strong style='margin-left: 12px;'>AWAITING*</strong> - System is waiting for the end-user to complete an action</li>\n<li><strong style='margin-left: 12px;'>CANCELLED*</strong> - Domain has been cancelled, and may or may not be reclaimable</li>\n<li><strong style='margin-left: 12px;'>CONFISCATED</strong> - Domain has been confiscated, usually for abuse, chargeback, or fraud</li>\n<li><strong style='margin-left: 12px;'>DISABLED*</strong> - Domain has been disabled</li>\n<li><strong style='margin-left: 12px;'>EXCLUDED*</strong> - Domain has been excluded from Firehose registration</li>\n<li><strong style='margin-left: 12px;'>EXPIRED*</strong> - Domain has expired</li>\n<li><strong style='margin-left: 12px;'>FAILED*</strong> - Domain has failed a required action, and the system is no longer retrying</li>\n<li><strong style='margin-left: 12px;'>HELD*</strong> - Domain has been placed on hold, and likely requires intervention from Support</li>\n<li><strong style='margin-left: 12px;'>LOCKED*</strong> - Domain has been locked, and likely requires intervention from Support</li>\n<li><strong style='margin-left: 12px;'>PARKED*</strong> - Domain has been parked, and likely requires intervention from Support</li>\n<li><strong style='margin-left: 12px;'>PENDING*</strong> - Domain is working its way through an automated workflow</li>\n<li><strong style='margin-left: 12px;'>RESERVED*</strong> - Domain is reserved, and likely requires intervention from Support</li>\n<li><strong style='margin-left: 12px;'>REVERTED</strong> - Domain has been reverted, and likely requires intervention from Support</li>\n<li><strong style='margin-left: 12px;'>SUSPENDED*</strong> - Domain has been suspended, and likely requires intervention from Support</li>\n<li><strong style='margin-left: 12px;'>TRANSFERRED*</strong> - Domain has been transferred out</li>\n<li><strong style='margin-left: 12px;'>UNKNOWN</strong> - Domain is in an unknown state</li>\n<li><strong style='margin-left: 12px;'>UNLOCKED*</strong> - Domain has been unlocked, and likely requires intervention from Support</li>\n<li><strong style='margin-left: 12px;'>UNPARKED*</strong> - Domain has been unparked, and likely requires intervention from Support</li>\n<li><strong style='margin-left: 12px;'>UPDATED*</strong> - Domain ownership has been transferred to another account</li>\n</ul>",
    )
    transferAwayEligibleAt: Optional[datetime] = Field(
        None, description='Date and time when this domain is eligible to transfer'
    )
    transferProtected: bool = Field(
        ..., description='Whether or not the domain is protected from transfer'
    )


class DomainTransferIn(BaseModel):
    authCode: str = Field(
        ..., description='Authorization code from registrar for transferring a domain'
    )
    consent: Consent
    contactAdmin: Optional[Contact] = None
    contactBilling: Optional[Contact] = None
    contactRegistrant: Optional[Contact] = None
    contactTech: Optional[Contact] = None
    period: Optional[conint(ge=1, le=10)] = Field(
        1,
        description='Can be more than 1 but no more than 10 years total including current registration length',
    )
    privacy: Optional[bool] = Field(
        False, description='Whether or not privacy has been requested'
    )
    renewAuto: Optional[bool] = Field(
        True,
        description='Whether or not the domain should be configured to automatically renew',
    )


class DomainUpdate(BaseModel):
    consent: Optional[ConsentDomainUpdate] = None
    exposeWhois: Optional[bool] = Field(
        None,
        description='Whether or not the domain contact details should be shown in the WHOIS',
    )
    locked: Optional[bool] = Field(
        None,
        description='Whether or not the domain should be locked to prevent transfers',
    )
    nameServers: Optional[List[Any]] = Field(
        None,
        description='Fully-qualified domain names for Name Servers to associate with the domain',
    )
    renewAuto: Optional[bool] = Field(
        None,
        description='Whether or not the domain should be configured to automatically renew',
    )
    subaccountId: Optional[str] = Field(
        None, description='Reseller subaccount shopperid who can manage the domain'
    )


class EntityType(Enum):
    ABORIGINAL = 'ABORIGINAL'
    ASSOCIATION = 'ASSOCIATION'
    CITIZEN = 'CITIZEN'
    CORPORATION = 'CORPORATION'
    EDUCATIONAL = 'EDUCATIONAL'
    GOVERNMENT = 'GOVERNMENT'
    HOSPITAL = 'HOSPITAL'
    INDIAN_BAND = 'INDIAN_BAND'
    LEGAL_REPRESENTATIVE = 'LEGAL_REPRESENTATIVE'
    LIBRARY_ARCHIVE_MUSEUM = 'LIBRARY_ARCHIVE_MUSEUM'
    MARK_REGISTERED = 'MARK_REGISTERED'
    MARK_TRADE = 'MARK_TRADE'
    PARTNERSHIP = 'PARTNERSHIP'
    POLITICAL_PARTY = 'POLITICAL_PARTY'
    RESIDENT_PERMANENT = 'RESIDENT_PERMANENT'
    TRUST = 'TRUST'
    UNION = 'UNION'


class DomainsContactsBulk(BaseModel):
    contactAdmin: Optional[Contact] = None
    contactBilling: Optional[Contact] = None
    contactPresence: Optional[Contact] = None
    contactRegistrant: Optional[Contact] = None
    contactTech: Optional[Contact] = None
    domains: List[str] = Field(
        ...,
        description='An array of domain names to be validated against. Alternatively, you can specify the extracted tlds. However, full domain names are required if the tld is `uk`',
    )
    entityType: Optional[EntityType] = Field(
        None, description='Canadian Presence Requirement (CA)'
    )


class ErrorField(BaseModel):
    code: str = Field(
        ...,
        description='Short identifier for the error, suitable for indicating the specific error within client code',
    )
    message: Optional[str] = Field(
        None,
        description='Human-readable, English description of the problem with the contents of the field',
    )
    path: str = Field(
        ...,
        description="<ul>\n<li style='margin-left: 12px;'>JSONPath referring to a field containing an error</li>\n<strong style='margin-left: 12px;'>OR</strong>\n<li style='margin-left: 12px;'>JSONPath referring to a field that refers to an object containing an error, with more detail in `pathRelated`</li>\n</ul>",
    )
    pathRelated: Optional[str] = Field(
        None,
        description='JSONPath referring to a field containing an error, which is referenced by `path`',
    )


class ErrorFieldDomainContactsValidate(BaseModel):
    code: str = Field(
        ...,
        description='Short identifier for the error, suitable for indicating the specific error within client code',
    )
    domains: List[str] = Field(
        ...,
        description='An array of domain names the error is for. If tlds are specified in the request, `domains` will contain tlds. For example, if `domains` in request is ["test1.com", "test2.uk", "net"], and the field is invalid for com and net, then one of the `fields` in response will have ["test1.com", "net"] as `domains`',
    )
    message: Optional[str] = Field(
        None,
        description='Human-readable, English description of the problem with the contents of the field',
    )
    path: str = Field(
        ...,
        description='1) JSONPath referring to the field within the data containing an error<br/>or<br/>2) JSONPath referring to an object containing an error',
    )
    pathRelated: Optional[str] = Field(
        None,
        description='JSONPath referring to the field on the object referenced by `path` containing an error',
    )


class ErrorLimit(BaseModel):
    code: str = Field(
        ...,
        description='Short identifier for the error, suitable for indicating the specific error within client code',
    )
    fields: Optional[List[ErrorField]] = Field(
        None,
        description='List of the specific fields, and the errors found with their contents',
    )
    message: Optional[str] = Field(
        None, description='Human-readable, English description of the error'
    )
    retryAfterSec: int = Field(
        ..., description='Number of seconds to wait before attempting a similar request'
    )


class JsonDataType(BaseModel):
    format: Optional[str] = None
    pattern: Optional[str] = None
    type: str


class Items(BaseModel):
    pass


class JsonProperty(BaseModel):
    defaultValue: Optional[str] = None
    format: Optional[str] = None
    items: Optional[Union[List[JsonDataType], Items]] = None
    maxItems: Optional[int] = None
    maximum: Optional[int] = None
    minItems: Optional[int] = None
    minimum: Optional[int] = None
    pattern: Optional[str] = None
    required: bool
    type: str


class Models(BaseModel):
    pass


class Properties(BaseModel):
    pass


class JsonSchema(BaseModel):
    id: str
    models: Union[List[JsonSchema], Models]
    properties: Union[List[JsonProperty], Properties]
    required: List[str]


class LegalAgreement(BaseModel):
    agreementKey: str = Field(
        ..., description='Unique identifier for the legal agreement'
    )
    content: str = Field(
        ..., description='Contents of the legal agreement, suitable for embedding'
    )
    title: str = Field(..., description='Title of the legal agreement')
    url: Optional[str] = Field(
        None, description='URL to a page containing the legal agreement'
    )


class Environment(Enum):
    OTE = 'OTE'
    PRODUCTION = 'PRODUCTION'


class Reason(Enum):
    EMERGENCY = 'EMERGENCY'
    PLANNED = 'PLANNED'


class Status3(Enum):
    ACTIVE = 'ACTIVE'
    CANCELLED = 'CANCELLED'


class Type6(Enum):
    API = 'API'
    REGISTRY = 'REGISTRY'
    UI = 'UI'


class Maintenance(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    createdAt: str = Field(
        ..., description='Date and time (UTC) when this maintenance was created'
    )
    endsAt: str = Field(
        ..., description='Date and time (UTC) when this maintenance will complete'
    )
    environment: Environment = Field(
        ...,
        description="The environment on which the maintenance will be performed<br/><ul><li><strong style='margin-left: 12px;'>OTE</strong> - The Operational Testing Environment.</li><li><strong style='margin-left: 12px;'>PRODUCTION</strong> - The Live Production Environment.</li></ul>",
    )
    maintenanceId: str = Field(
        ..., description='The identifier for the system maintenance'
    )
    modifiedAt: str = Field(
        ..., description='Date and time (UTC) when this maintenance was last modified'
    )
    reason: Reason = Field(
        ...,
        description="The reason for the maintenance being performed<br/><ul><li><strong style='margin-left: 12px;'>EMERGENCY</strong> - Unexpected Emergency maintenance.</li><li><strong style='margin-left: 12px;'>PLANNED</strong> - Planned system maintenance.</li></ul>",
    )
    startsAt: str = Field(
        ..., description='Date and time (UTC) when this maintenance will start'
    )
    status: Status3 = Field(
        ...,
        description="The status of maintenance<br/><ul><li><strong style='margin-left: 12px;'>ACTIVE</strong> - The upcoming maintenance is active.</li><li><strong style='margin-left: 12px;'>CANCELLED</strong> - The upcoming maintenance has been cancelled.</li></ul>",
    )
    summary: str = Field(
        ..., description='A brief description of what is being performed'
    )
    tlds: Optional[List[str]] = Field(
        None,
        description='List of tlds that are in maintenance.  Generally only applies when `type` is REGISTRY',
    )
    type: Type6 = Field(
        ...,
        description="The type of maintenance being performed<br/><ul><li><strong style='margin-left: 12px;'>API</strong> - Programmatic Api components.</li><li><strong style='margin-left: 12px;'>REGISTRY</strong> - The underlying Registry providing the tld(s).</li><li><strong style='margin-left: 12px;'>UI</strong> - User Interface components.</li></ul>",
    )


class ImpactEnum(Enum):
    DELAYED = 'DELAYED'
    DOWN = 'DOWN'
    NON_AUTHORITATIVE = 'NON_AUTHORITATIVE'
    PARTIAL = 'PARTIAL'


class Name(Enum):
    DOMAIN_CHECKS = 'DOMAIN_CHECKS'
    DOMAIN_MANAGEMENT = 'DOMAIN_MANAGEMENT'
    DOMAIN_REGISTRATION = 'DOMAIN_REGISTRATION'
    DOMAIN_REGISTRATION_DATA = 'DOMAIN_REGISTRATION_DATA'
    DOMAIN_RESOLUTION = 'DOMAIN_RESOLUTION'
    RESELLER_ADMIN_PORTAL = 'RESELLER_ADMIN_PORTAL'
    RESELLER_STOREFRONT = 'RESELLER_STOREFRONT'


class MaintenanceSystem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    impact: List[ImpactEnum] = Field(
        ...,
        description="The impact of the maintenance to the system<br/><ul><li><strong style='margin-left: 12px;'>DELAYED</strong> - This response generally applies to systems where the request is queued up and processed once the system is back online.</li><li><strong style='margin-left: 12px;'>DOWN</strong> - The system will be entirely offline; errors are expected.</li><li><strong style='margin-left: 12px;'>NON_AUTHORITATIVE</strong> - This response generally applies to DOMAIN_CHECKS and DOMAIN_MANAGEMENT `system` values where a cached answer will be supplied.</li><li><strong style='margin-left: 12px;'>PARTIAL</strong> - The system will experience partial feature outages; some errors are expected.</li></ul>",
    )
    name: Name = Field(
        ...,
        description="The name of the system affected by the maintenance<br/><ul><li><strong style='margin-left: 12px;'>DOMAIN_CHECKS</strong> - Refers to domain availability checks.</li><li><strong style='margin-left: 12px;'>DOMAIN_MANAGEMENT</strong> - Refers to domain management options including various update options on the domain, contacts, records, etc.</li><li><strong style='margin-left: 12px;'>DOMAIN_REGISTRATION</strong> - Refers to domain registrations, renewals, transfers.</li><li><strong style='margin-left: 12px;'>DOMAIN_REGISTRATION_DATA</strong> - Refers to RDAP and WHOIS Service queries for domains.</li><li><strong style='margin-left: 12px;'>DOMAIN_RESOLUTION</strong> - Refers to DNS resolution for domains.</li><li><strong style='margin-left: 12px;'>RESELLER_ADMIN_PORTAL</strong> - Refers to Admin portals to manage the reseller account and settings.</li><li><strong style='margin-left: 12px;'>RESELLER_STOREFRONT</strong> - Refers to the Reseller Storefront features (Standard and Custom).</li></ul>",
    )


class PrivacyPurchase(BaseModel):
    consent: Consent


class Status5(Enum):
    APPROVED = 'APPROVED'
    PENDING = 'PENDING'
    PENDING_ASSOCIATION_WITH_DOMAIN = 'PENDING_ASSOCIATION_WITH_DOMAIN'
    PENDING_SUBMISSION_TO_VERIFICATION_SERVICE = (
        'PENDING_SUBMISSION_TO_VERIFICATION_SERVICE'
    )
    PENDING_VERIFICATION_SERVICE_REPLY = 'PENDING_VERIFICATION_SERVICE_REPLY'
    PENDING_SUBMISSION_TO_REGISTRY = 'PENDING_SUBMISSION_TO_REGISTRY'
    PENDING_REGISTRY_REPLY = 'PENDING_REGISTRY_REPLY'
    PENDING_DOMAIN_UPDATE = 'PENDING_DOMAIN_UPDATE'
    REJECTED = 'REJECTED'


class RealNameValidation(BaseModel):
    status: Optional[Status5] = None


class RenewalDetails(BaseModel):
    currency: constr(pattern=r'^[A-Z][A-Z][A-Z]$') = Field(
        ..., description='Currency in which the `price` is listed'
    )
    price: int = Field(
        ..., description='Price for the domain renewal excluding taxes or fees'
    )
    renewable: Optional[bool] = Field(
        None,
        description='Whether or not the domain is eligble for renewal based on status',
    )


class Type8(Enum):
    COUNTRY_CODE = 'COUNTRY_CODE'
    GENERIC = 'GENERIC'


class TldSummary(BaseModel):
    name: str = Field(..., description='Name of the top-level domain')
    type: Type8 = Field(..., description='Type of the top-level domain')


class Status6(Enum):
    APPROVED = 'APPROVED'
    PENDING = 'PENDING'
    REJECTED = 'REJECTED'
    UNABLE_TO_RETRIEVE_STATUS = 'UNABLE_TO_RETRIEVE_STATUS'


class VerificationDomainName(BaseModel):
    status: Status6 = Field(..., description='Status of the domain name verification')


class Status7(Enum):
    APPROVED = 'APPROVED'
    PENDING = 'PENDING'
    REJECTED_DOCUMENT_OUTDATED = 'REJECTED_DOCUMENT_OUTDATED'
    REJECTED_EXPIRED_BUSINESS_LICENSE = 'REJECTED_EXPIRED_BUSINESS_LICENSE'
    REJECTED_EXPIRED_ORGANIZATION_CODE = 'REJECTED_EXPIRED_ORGANIZATION_CODE'
    REJECTED_ILLEGIBLE_DOCUMENT_NAME = 'REJECTED_ILLEGIBLE_DOCUMENT_NAME'
    REJECTED_ILLEGIBLE_IDENTIFICATION = 'REJECTED_ILLEGIBLE_IDENTIFICATION'
    REJECTED_INCOMPLETE_IDENTIFICATION = 'REJECTED_INCOMPLETE_IDENTIFICATION'
    REJECTED_INCOMPLETE_REGISTRATION_LETTER = 'REJECTED_INCOMPLETE_REGISTRATION_LETTER'
    REJECTED_INCONSISTENT_IDENTITY_CARD = 'REJECTED_INCONSISTENT_IDENTITY_CARD'
    REJECTED_INCONSISTENT_ORGANIZATION_CODE = 'REJECTED_INCONSISTENT_ORGANIZATION_CODE'
    REJECTED_INCONSISTENT_REGISTRANT_NAME = 'REJECTED_INCONSISTENT_REGISTRANT_NAME'
    REJECTED_INVALID_BUSINESS_LICENSE_OR_ORGANIZATION_CODE = (
        'REJECTED_INVALID_BUSINESS_LICENSE_OR_ORGANIZATION_CODE'
    )
    REJECTED_INVALID_DOCUMENT = 'REJECTED_INVALID_DOCUMENT'
    REJECTED_MISMATCH_BUSINESS_ID = 'REJECTED_MISMATCH_BUSINESS_ID'
    REJECTED_MISMATCH_BUSINESS_NAME = 'REJECTED_MISMATCH_BUSINESS_NAME'
    REJECTED_MISMATCH_DOCUMENT_ID = 'REJECTED_MISMATCH_DOCUMENT_ID'
    REJECTED_MISMATCH_DOCUMENT_NAME = 'REJECTED_MISMATCH_DOCUMENT_NAME'
    REJECTED_MISMATCH_DOCUMENT_TYPE = 'REJECTED_MISMATCH_DOCUMENT_TYPE'
    REJECTED_MISMATCH_REGISTRANT_INFO = 'REJECTED_MISMATCH_REGISTRANT_INFO'
    REJECTED_MISMATCH_REGISTRANT_LOCALITY = 'REJECTED_MISMATCH_REGISTRANT_LOCALITY'
    REJECTED_MISMATCH_REGISTRANT_NAME = 'REJECTED_MISMATCH_REGISTRANT_NAME'
    REJECTED_UNABLE_TO_OPEN = 'REJECTED_UNABLE_TO_OPEN'
    REJECTED_UNABLE_TO_VERIFY = 'REJECTED_UNABLE_TO_VERIFY'
    REJECTED_UNKNOWN_ERROR = 'REJECTED_UNKNOWN_ERROR'
    UNABLE_TO_RETRIEVE_STATUS = 'UNABLE_TO_RETRIEVE_STATUS'


class VerificationRealName(BaseModel):
    status: Status7 = Field(
        ...,
        description="Status of the real name verification<br/><ul> <li><strong style='margin-left: 12px;'>APPROVED</strong> - All is well</li> <li><strong style='margin-left: 12px;'>PENDING</strong> - Real name verification is working its way through the workflow</li> <li><strong style='margin-left: 12px;'>REJECTED_DOCUMENT_OUTDATED</strong> - Local government verification shows there is a newer version of your document.  Upload the latest version of the document and retry real name verification</li> <li><strong style='margin-left: 12px;'>REJECTED_EXPIRED_BUSINESS_LICENSE</strong> - Business license is expired</li> <li><strong style='margin-left: 12px;'>REJECTED_EXPIRED_ORGANIZATION_CODE</strong> - Organization code certificate number has expired</li> <li><strong style='margin-left: 12px;'>REJECTED_ILLEGIBLE_DOCUMENT_NAME</strong> - There isn’t a clear name on your uploaded document, please upload a different document to retry real name verification</li> <li><strong style='margin-left: 12px;'>REJECTED_ILLEGIBLE_IDENTIFICATION</strong> - Registrant identification is not clear.  Upload a better image to retry</li> <li><strong style='margin-left: 12px;'>REJECTED_INCOMPLETE_IDENTIFICATION</strong> - Registrant identification is incomplete</li> <li><strong style='margin-left: 12px;'>REJECTED_INCOMPLETE_REGISTRATION_LETTER</strong> - Registration letter is incomplete</li> <li><strong style='margin-left: 12px;'>REJECTED_INCONSISTENT_IDENTITY_CARD</strong> - Provided identity card is inconsistent with the identity card on record</li> <li><strong style='margin-left: 12px;'>REJECTED_INCONSISTENT_ORGANIZATION_CODE</strong> - Provided organization information is inconsistent with the results obtained using the submitted organization code</li> <li><strong style='margin-left: 12px;'>REJECTED_INCONSISTENT_REGISTRANT_NAME</strong> - Name on the registrant identification does not match the name in the system</li> <li><strong style='margin-left: 12px;'>REJECTED_INVALID_BUSINESS_LICENSE_OR_ORGANIZATION_CODE</strong> - Your document contains an invalid business license or organization code certificate number</li> <li><strong style='margin-left: 12px;'>REJECTED_INVALID_DOCUMENT</strong> - Document is invalid.  Please upload another document to retry real name verification</li> <li><strong style='margin-left: 12px;'>REJECTED_MISMATCH_BUSINESS_ID</strong> - Business id does not match the business id in the document</li> <li><strong style='margin-left: 12px;'>REJECTED_MISMATCH_BUSINESS_NAME</strong> - Business name does not match the business name in the document</li> <li><strong style='margin-left: 12px;'>REJECTED_MISMATCH_DOCUMENT_ID</strong> - Document id does not match the id in the document</li> <li><strong style='margin-left: 12px;'>REJECTED_MISMATCH_DOCUMENT_NAME</strong> - Document name does not match the name in the document</li> <li><strong style='margin-left: 12px;'>REJECTED_MISMATCH_DOCUMENT_TYPE</strong> - Document type does not match the document</li> <li><strong style='margin-left: 12px;'>REJECTED_MISMATCH_REGISTRANT_INFO</strong> - The information provided for the registrant does not match the document</li> <li><strong style='margin-left: 12px;'>REJECTED_MISMATCH_REGISTRANT_LOCALITY</strong> - Registrant region is overseas, but a local identity document was provided</li> <li><strong style='margin-left: 12px;'>REJECTED_MISMATCH_REGISTRANT_NAME</strong> - Registrant name has been changed, so the request must be resubmitted</li> <li><strong style='margin-left: 12px;'>REJECTED_UNABLE_TO_OPEN</strong> - Registrant identification could not be opened.  Please upload the document again to retry real name verification</li> <li><strong style='margin-left: 12px;'>REJECTED_UNABLE_TO_VERIFY</strong> - Unable to initiate verification.  Please upload the document again to retry real name verification</li> <li><strong style='margin-left: 12px;'>REJECTED_UNKNOWN_ERROR</strong> - Document was rejected due to an unknown error. For more information, contact customer support</li> <li><strong style='margin-left: 12px;'>UNABLE_TO_RETRIEVE_STATUS</strong> - Unable to retrieve status for the real name verification process.  Retry, if this status persists, contact customer support</li> </ul>",
    )


class VerificationsDomain(BaseModel):
    domainName: Optional[VerificationDomainName] = None
    realName: Optional[VerificationRealName] = None


class DomainName(Enum):
    APPROVED = 'APPROVED'
    PENDING = 'PENDING'
    REJECTED = 'REJECTED'
    UNABLE_TO_RETRIEVE_STATUS = 'UNABLE_TO_RETRIEVE_STATUS'


class Icann(Enum):
    COMPLETED = 'COMPLETED'
    PENDING = 'PENDING'
    UNABLE_TO_RETRIEVE_STATUS = 'UNABLE_TO_RETRIEVE_STATUS'


class RealName(Enum):
    APPROVED = 'APPROVED'
    PENDING = 'PENDING'
    REJECTED_DOCUMENT_OUTDATED = 'REJECTED_DOCUMENT_OUTDATED'
    REJECTED_EXPIRED_BUSINESS_LICENSE = 'REJECTED_EXPIRED_BUSINESS_LICENSE'
    REJECTED_EXPIRED_ORGANIZATION_CODE = 'REJECTED_EXPIRED_ORGANIZATION_CODE'
    REJECTED_ILLEGIBLE_DOCUMENT_NAME = 'REJECTED_ILLEGIBLE_DOCUMENT_NAME'
    REJECTED_ILLEGIBLE_IDENTIFICATION = 'REJECTED_ILLEGIBLE_IDENTIFICATION'
    REJECTED_INCOMPLETE_IDENTIFICATION = 'REJECTED_INCOMPLETE_IDENTIFICATION'
    REJECTED_INCOMPLETE_REGISTRATION_LETTER = 'REJECTED_INCOMPLETE_REGISTRATION_LETTER'
    REJECTED_INCONSISTENT_IDENTITY_CARD = 'REJECTED_INCONSISTENT_IDENTITY_CARD'
    REJECTED_INCONSISTENT_ORGANIZATION_CODE = 'REJECTED_INCONSISTENT_ORGANIZATION_CODE'
    REJECTED_INCONSISTENT_REGISTRANT_NAME = 'REJECTED_INCONSISTENT_REGISTRANT_NAME'
    REJECTED_INVALID_BUSINESS_LICENSE_OR_ORGANIZATION_CODE = (
        'REJECTED_INVALID_BUSINESS_LICENSE_OR_ORGANIZATION_CODE'
    )
    REJECTED_INVALID_DOCUMENT = 'REJECTED_INVALID_DOCUMENT'
    REJECTED_MISMATCH_BUSINESS_ID = 'REJECTED_MISMATCH_BUSINESS_ID'
    REJECTED_MISMATCH_BUSINESS_NAME = 'REJECTED_MISMATCH_BUSINESS_NAME'
    REJECTED_MISMATCH_DOCUMENT_ID = 'REJECTED_MISMATCH_DOCUMENT_ID'
    REJECTED_MISMATCH_DOCUMENT_NAME = 'REJECTED_MISMATCH_DOCUMENT_NAME'
    REJECTED_MISMATCH_DOCUMENT_TYPE = 'REJECTED_MISMATCH_DOCUMENT_TYPE'
    REJECTED_MISMATCH_REGISTRANT_INFO = 'REJECTED_MISMATCH_REGISTRANT_INFO'
    REJECTED_MISMATCH_REGISTRANT_LOCALITY = 'REJECTED_MISMATCH_REGISTRANT_LOCALITY'
    REJECTED_MISMATCH_REGISTRANT_NAME = 'REJECTED_MISMATCH_REGISTRANT_NAME'
    REJECTED_UNABLE_TO_OPEN = 'REJECTED_UNABLE_TO_OPEN'
    REJECTED_UNABLE_TO_VERIFY = 'REJECTED_UNABLE_TO_VERIFY'
    REJECTED_UNKNOWN_ERROR = 'REJECTED_UNKNOWN_ERROR'
    UNABLE_TO_RETRIEVE_STATUS = 'UNABLE_TO_RETRIEVE_STATUS'


class VerificationsDomainV2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    domainName: Optional[DomainName] = Field(
        None,
        description='Status of the verification of the domain name against a prohibited list maintained by the government',
    )
    icann: Optional[Icann] = Field(
        None,
        description="Status of the Icann verification of domain registrant contact by completing email and/or phone verification<br/><ul><li><strong style='margin-left: 12px;'>COMPLETED</strong> - Icann verification has been completed.</li><li><strong style='margin-left: 12px;'>PENDING</strong> - Icann verification has not been completed.</li></ul>",
    )
    realName: Optional[RealName] = Field(
        None,
        description="Status of the real name verification of an identity by comparing registration data against government issued documents<br/><ul><li><strong style='margin-left: 12px;'>APPROVED</strong> - All is well</li><li><strong style='margin-left: 12px;'>PENDING</strong> - Real name verification is working its way through the workflow</li><li><strong style='margin-left: 12px;'>REJECTED_DOCUMENT_OUTDATED</strong> - Local government verification shows there is a newer version of your document.  Upload the latest version of the document and retry real name verification</li><li><strong style='margin-left: 12px;'>REJECTED_EXPIRED_BUSINESS_LICENSE</strong> - Business license is expired</li><li><strong style='margin-left: 12px;'>REJECTED_EXPIRED_ORGANIZATION_CODE</strong> - Organization code certificate number has expired</li><li><strong style='margin-left: 12px;'>REJECTED_ILLEGIBLE_DOCUMENT_NAME</strong> - There isn’t a clear name on your uploaded document, please upload a different document to retry real name verification</li><li><strong style='margin-left: 12px;'>REJECTED_ILLEGIBLE_IDENTIFICATION</strong> - Registrant identification is not clear.  Upload a better image to retry</li><li><strong style='margin-left: 12px;'>REJECTED_INCOMPLETE_IDENTIFICATION</strong> - Registrant identification is incomplete</li><li><strong style='margin-left: 12px;'>REJECTED_INCOMPLETE_REGISTRATION_LETTER</strong> - Registration letter is incomplete</li><li><strong style='margin-left: 12px;'>REJECTED_INCONSISTENT_IDENTITY_CARD</strong> - Provided identity card is inconsistent with the identity card on record</li><li><strong style='margin-left: 12px;'>REJECTED_INCONSISTENT_ORGANIZATION_CODE</strong> - Provided organization information is inconsistent with the results obtained using the submitted organization code</li><li><strong style='margin-left: 12px;'>REJECTED_INCONSISTENT_REGISTRANT_NAME</strong> - Name on the registrant identification does not match the name in the system</li><li><strong style='margin-left: 12px;'>REJECTED_INVALID_BUSINESS_LICENSE_OR_ORGANIZATION_CODE</strong> - Your document contains an invalid business license or organization code certificate number</li><li><strong style='margin-left: 12px;'>REJECTED_INVALID_DOCUMENT</strong> - Document is invalid.  Please upload another document to retry real name verification</li><li><strong style='margin-left: 12px;'>REJECTED_MISMATCH_BUSINESS_ID</strong> - Business id does not match the business id in the document</li><li><strong style='margin-left: 12px;'>REJECTED_MISMATCH_BUSINESS_NAME</strong> - Business name does not match the business name in the document</li><li><strong style='margin-left: 12px;'>REJECTED_MISMATCH_DOCUMENT_ID</strong> - Document id does not match the id in the document</li><li><strong style='margin-left: 12px;'>REJECTED_MISMATCH_DOCUMENT_NAME</strong> - Document name does not match the name in the document</li><li><strong style='margin-left: 12px;'>REJECTED_MISMATCH_DOCUMENT_TYPE</strong> - Document type does not match the document</li><li><strong style='margin-left: 12px;'>REJECTED_MISMATCH_REGISTRANT_INFO</strong> - The information provided for the registrant does not match the document</li><li><strong style='margin-left: 12px;'>REJECTED_MISMATCH_REGISTRANT_LOCALITY</strong> - Registrant region is overseas, but a local identity document was provided</li><li><strong style='margin-left: 12px;'>REJECTED_MISMATCH_REGISTRANT_NAME</strong> - Registrant name has been changed, so the request must be resubmitted</li><li><strong style='margin-left: 12px;'>REJECTED_UNABLE_TO_OPEN</strong> - Registrant identification could not be opened.  Please upload the document again to retry real name verification</li><li><strong style='margin-left: 12px;'>REJECTED_UNABLE_TO_VERIFY</strong> - Unable to initiate verification.  Please upload the document again to retry real name verification</li><li><strong style='margin-left: 12px;'>REJECTED_UNKNOWN_ERROR</strong> - Document was rejected due to an unknown error. For more information, contact customer support</li><li><strong style='margin-left: 12px;'>UNABLE_TO_RETRIEVE_STATUS</strong> - Unable to retrieve status for the real name verification process.  Retry, if this status persists, contact customer support</li></ul>",
    )


class Domain(BaseModel):
    id: Optional[float] = None


class Status8(Enum):
    ACTIVE = 'ACTIVE'
    AWAITING_CLAIM_ACK = 'AWAITING_CLAIM_ACK'
    AWAITING_DOCUMENT_AFTER_TRANSFER = 'AWAITING_DOCUMENT_AFTER_TRANSFER'
    AWAITING_DOCUMENT_AFTER_UPDATE_ACCOUNT = 'AWAITING_DOCUMENT_AFTER_UPDATE_ACCOUNT'
    AWAITING_DOCUMENT_UPLOAD = 'AWAITING_DOCUMENT_UPLOAD'
    AWAITING_FAILED_TRANSFER_WHOIS_PRIVACY = 'AWAITING_FAILED_TRANSFER_WHOIS_PRIVACY'
    AWAITING_PAYMENT = 'AWAITING_PAYMENT'
    AWAITING_RENEWAL_TRANSFER_IN_COMPLETE = 'AWAITING_RENEWAL_TRANSFER_IN_COMPLETE'
    AWAITING_TRANSFER_IN_ACK = 'AWAITING_TRANSFER_IN_ACK'
    AWAITING_TRANSFER_IN_AUTH = 'AWAITING_TRANSFER_IN_AUTH'
    AWAITING_TRANSFER_IN_AUTO = 'AWAITING_TRANSFER_IN_AUTO'
    AWAITING_TRANSFER_IN_WHOIS = 'AWAITING_TRANSFER_IN_WHOIS'
    AWAITING_TRANSFER_IN_WHOIS_FIX = 'AWAITING_TRANSFER_IN_WHOIS_FIX'
    AWAITING_VERIFICATION_ICANN = 'AWAITING_VERIFICATION_ICANN'
    AWAITING_VERIFICATION_ICANN_MANUAL = 'AWAITING_VERIFICATION_ICANN_MANUAL'
    CANCELLED = 'CANCELLED'
    CANCELLED_HELD = 'CANCELLED_HELD'
    CANCELLED_REDEEMABLE = 'CANCELLED_REDEEMABLE'
    CANCELLED_TRANSFER = 'CANCELLED_TRANSFER'
    CONFISCATED = 'CONFISCATED'
    DISABLED_SPECIAL = 'DISABLED_SPECIAL'
    EXCLUDED_INVALID_CLAIM_FIREHOSE = 'EXCLUDED_INVALID_CLAIM_FIREHOSE'
    EXPIRED_REASSIGNED = 'EXPIRED_REASSIGNED'
    FAILED_BACKORDER_CAPTURE = 'FAILED_BACKORDER_CAPTURE'
    FAILED_DROP_IMMEDIATE_THEN_ADD = 'FAILED_DROP_IMMEDIATE_THEN_ADD'
    FAILED_PRE_REGISTRATION = 'FAILED_PRE_REGISTRATION'
    FAILED_REDEMPTION = 'FAILED_REDEMPTION'
    FAILED_REDEMPTION_REPORT = 'FAILED_REDEMPTION_REPORT'
    FAILED_REGISTRATION = 'FAILED_REGISTRATION'
    FAILED_REGISTRATION_FIREHOSE = 'FAILED_REGISTRATION_FIREHOSE'
    FAILED_RESTORATION_REDEMPTION_MOCK = 'FAILED_RESTORATION_REDEMPTION_MOCK'
    FAILED_SETUP = 'FAILED_SETUP'
    FAILED_TRANSFER_IN = 'FAILED_TRANSFER_IN'
    FAILED_TRANSFER_IN_BAD_STATUS = 'FAILED_TRANSFER_IN_BAD_STATUS'
    FAILED_TRANSFER_IN_REGISTRY = 'FAILED_TRANSFER_IN_REGISTRY'
    HELD_COURT_ORDERED = 'HELD_COURT_ORDERED'
    HELD_DISPUTED = 'HELD_DISPUTED'
    HELD_EXPIRATION_PROTECTION = 'HELD_EXPIRATION_PROTECTION'
    HELD_EXPIRED_REDEMPTION_MOCK = 'HELD_EXPIRED_REDEMPTION_MOCK'
    HELD_REGISTRAR_ADD = 'HELD_REGISTRAR_ADD'
    HELD_REGISTRAR_REMOVE = 'HELD_REGISTRAR_REMOVE'
    HELD_SHOPPER = 'HELD_SHOPPER'
    HELD_TEMPORARY = 'HELD_TEMPORARY'
    LOCKED_ABUSE = 'LOCKED_ABUSE'
    LOCKED_COPYRIGHT = 'LOCKED_COPYRIGHT'
    LOCKED_REGISTRY = 'LOCKED_REGISTRY'
    LOCKED_SUPER = 'LOCKED_SUPER'
    PARKED_AND_HELD = 'PARKED_AND_HELD'
    PARKED_EXPIRED = 'PARKED_EXPIRED'
    PARKED_VERIFICATION_ICANN = 'PARKED_VERIFICATION_ICANN'
    PENDING_ABORT_CANCEL_SETUP = 'PENDING_ABORT_CANCEL_SETUP'
    PENDING_AGREEMENT_PRE_REGISTRATION = 'PENDING_AGREEMENT_PRE_REGISTRATION'
    PENDING_APPLY_RENEWAL_CREDITS = 'PENDING_APPLY_RENEWAL_CREDITS'
    PENDING_BACKORDER_CAPTURE = 'PENDING_BACKORDER_CAPTURE'
    PENDING_BLOCKED_REGISTRY = 'PENDING_BLOCKED_REGISTRY'
    PENDING_CANCEL_REGISTRANT_PROFILE = 'PENDING_CANCEL_REGISTRANT_PROFILE'
    PENDING_COMPLETE_REDEMPTION_WITHOUT_RECEIPT = (
        'PENDING_COMPLETE_REDEMPTION_WITHOUT_RECEIPT'
    )
    PENDING_COMPLETE_REGISTRANT_PROFILE = 'PENDING_COMPLETE_REGISTRANT_PROFILE'
    PENDING_COO = 'PENDING_COO'
    PENDING_COO_COMPLETE = 'PENDING_COO_COMPLETE'
    PENDING_DNS = 'PENDING_DNS'
    PENDING_DNS_ACTIVE = 'PENDING_DNS_ACTIVE'
    PENDING_DNS_INACTIVE = 'PENDING_DNS_INACTIVE'
    PENDING_DOCUMENT_VALIDATION = 'PENDING_DOCUMENT_VALIDATION'
    PENDING_DOCUMENT_VERIFICATION = 'PENDING_DOCUMENT_VERIFICATION'
    PENDING_DROP_IMMEDIATE = 'PENDING_DROP_IMMEDIATE'
    PENDING_DROP_IMMEDIATE_THEN_ADD = 'PENDING_DROP_IMMEDIATE_THEN_ADD'
    PENDING_EPP_CREATE = 'PENDING_EPP_CREATE'
    PENDING_EPP_DELETE = 'PENDING_EPP_DELETE'
    PENDING_EPP_UPDATE = 'PENDING_EPP_UPDATE'
    PENDING_ESCALATION_REGISTRY = 'PENDING_ESCALATION_REGISTRY'
    PENDING_EXPIRATION = 'PENDING_EXPIRATION'
    PENDING_EXPIRATION_RESPONSE = 'PENDING_EXPIRATION_RESPONSE'
    PENDING_EXPIRATION_SYNC = 'PENDING_EXPIRATION_SYNC'
    PENDING_EXPIRED_REASSIGNMENT = 'PENDING_EXPIRED_REASSIGNMENT'
    PENDING_EXPIRE_AUTO_ADD = 'PENDING_EXPIRE_AUTO_ADD'
    PENDING_EXTEND_REGISTRANT_PROFILE = 'PENDING_EXTEND_REGISTRANT_PROFILE'
    PENDING_FAILED_COO = 'PENDING_FAILED_COO'
    PENDING_FAILED_EPP_CREATE = 'PENDING_FAILED_EPP_CREATE'
    PENDING_FAILED_HELD = 'PENDING_FAILED_HELD'
    PENDING_FAILED_PURCHASE_PREMIUM = 'PENDING_FAILED_PURCHASE_PREMIUM'
    PENDING_FAILED_RECONCILE_FIREHOSE = 'PENDING_FAILED_RECONCILE_FIREHOSE'
    PENDING_FAILED_REDEMPTION_WITHOUT_RECEIPT = (
        'PENDING_FAILED_REDEMPTION_WITHOUT_RECEIPT'
    )
    PENDING_FAILED_RELEASE_PREMIUM = 'PENDING_FAILED_RELEASE_PREMIUM'
    PENDING_FAILED_RENEW_EXPIRATION_PROTECTION = (
        'PENDING_FAILED_RENEW_EXPIRATION_PROTECTION'
    )
    PENDING_FAILED_RESERVE_PREMIUM = 'PENDING_FAILED_RESERVE_PREMIUM'
    PENDING_FAILED_SUBMIT_FIREHOSE = 'PENDING_FAILED_SUBMIT_FIREHOSE'
    PENDING_FAILED_TRANSFER_ACK_PREMIUM = 'PENDING_FAILED_TRANSFER_ACK_PREMIUM'
    PENDING_FAILED_TRANSFER_IN_ACK_PREMIUM = 'PENDING_FAILED_TRANSFER_IN_ACK_PREMIUM'
    PENDING_FAILED_TRANSFER_IN_PREMIUM = 'PENDING_FAILED_TRANSFER_IN_PREMIUM'
    PENDING_FAILED_TRANSFER_PREMIUM = 'PENDING_FAILED_TRANSFER_PREMIUM'
    PENDING_FAILED_TRANSFER_SUBMIT_PREMIUM = 'PENDING_FAILED_TRANSFER_SUBMIT_PREMIUM'
    PENDING_FAILED_UNLOCK_PREMIUM = 'PENDING_FAILED_UNLOCK_PREMIUM'
    PENDING_FAILED_UPDATE_API = 'PENDING_FAILED_UPDATE_API'
    PENDING_FRAUD_VERIFICATION = 'PENDING_FRAUD_VERIFICATION'
    PENDING_FRAUD_VERIFIED = 'PENDING_FRAUD_VERIFIED'
    PENDING_GET_CONTACTS = 'PENDING_GET_CONTACTS'
    PENDING_GET_HOSTS = 'PENDING_GET_HOSTS'
    PENDING_GET_NAME_SERVERS = 'PENDING_GET_NAME_SERVERS'
    PENDING_GET_STATUS = 'PENDING_GET_STATUS'
    PENDING_HOLD_ESCROW = 'PENDING_HOLD_ESCROW'
    PENDING_HOLD_REDEMPTION = 'PENDING_HOLD_REDEMPTION'
    PENDING_LOCK_CLIENT_REMOVE = 'PENDING_LOCK_CLIENT_REMOVE'
    PENDING_LOCK_DATA_QUALITY = 'PENDING_LOCK_DATA_QUALITY'
    PENDING_LOCK_THEN_HOLD_REDEMPTION = 'PENDING_LOCK_THEN_HOLD_REDEMPTION'
    PENDING_PARKING_DETERMINATION = 'PENDING_PARKING_DETERMINATION'
    PENDING_PARK_INVALID_WHOIS = 'PENDING_PARK_INVALID_WHOIS'
    PENDING_PARK_INVALID_WHOIS_REMOVAL = 'PENDING_PARK_INVALID_WHOIS_REMOVAL'
    PENDING_PURCHASE_PREMIUM = 'PENDING_PURCHASE_PREMIUM'
    PENDING_RECONCILE = 'PENDING_RECONCILE'
    PENDING_RECONCILE_FIREHOSE = 'PENDING_RECONCILE_FIREHOSE'
    PENDING_REDEMPTION = 'PENDING_REDEMPTION'
    PENDING_REDEMPTION_REPORT = 'PENDING_REDEMPTION_REPORT'
    PENDING_REDEMPTION_REPORT_COMPLETE = 'PENDING_REDEMPTION_REPORT_COMPLETE'
    PENDING_REDEMPTION_REPORT_SUBMITTED = 'PENDING_REDEMPTION_REPORT_SUBMITTED'
    PENDING_REDEMPTION_WITHOUT_RECEIPT = 'PENDING_REDEMPTION_WITHOUT_RECEIPT'
    PENDING_REDEMPTION_WITHOUT_RECEIPT_MOCK = 'PENDING_REDEMPTION_WITHOUT_RECEIPT_MOCK'
    PENDING_RELEASE_PREMIUM = 'PENDING_RELEASE_PREMIUM'
    PENDING_REMOVAL = 'PENDING_REMOVAL'
    PENDING_REMOVAL_HELD = 'PENDING_REMOVAL_HELD'
    PENDING_REMOVAL_PARKED = 'PENDING_REMOVAL_PARKED'
    PENDING_REMOVAL_UNPARK = 'PENDING_REMOVAL_UNPARK'
    PENDING_RENEWAL = 'PENDING_RENEWAL'
    PENDING_RENEW_EXPIRATION_PROTECTION = 'PENDING_RENEW_EXPIRATION_PROTECTION'
    PENDING_RENEW_INFINITE = 'PENDING_RENEW_INFINITE'
    PENDING_RENEW_LOCKED = 'PENDING_RENEW_LOCKED'
    PENDING_RENEW_WITHOUT_RECEIPT = 'PENDING_RENEW_WITHOUT_RECEIPT'
    PENDING_REPORT_REDEMPTION_WITHOUT_RECEIPT = (
        'PENDING_REPORT_REDEMPTION_WITHOUT_RECEIPT'
    )
    PENDING_RESERVE_PREMIUM = 'PENDING_RESERVE_PREMIUM'
    PENDING_RESET_VERIFICATION_ICANN = 'PENDING_RESET_VERIFICATION_ICANN'
    PENDING_RESPONSE_FIREHOSE = 'PENDING_RESPONSE_FIREHOSE'
    PENDING_RESTORATION = 'PENDING_RESTORATION'
    PENDING_RESTORATION_INACTIVE = 'PENDING_RESTORATION_INACTIVE'
    PENDING_RESTORATION_REDEMPTION_MOCK = 'PENDING_RESTORATION_REDEMPTION_MOCK'
    PENDING_RETRY_EPP_CREATE = 'PENDING_RETRY_EPP_CREATE'
    PENDING_RETRY_HELD = 'PENDING_RETRY_HELD'
    PENDING_SEND_AUTH_CODE = 'PENDING_SEND_AUTH_CODE'
    PENDING_SETUP = 'PENDING_SETUP'
    PENDING_SETUP_ABANDON = 'PENDING_SETUP_ABANDON'
    PENDING_SETUP_AGREEMENT_LANDRUSH = 'PENDING_SETUP_AGREEMENT_LANDRUSH'
    PENDING_SETUP_AGREEMENT_SUNRISE2_A = 'PENDING_SETUP_AGREEMENT_SUNRISE2_A'
    PENDING_SETUP_AGREEMENT_SUNRISE2_B = 'PENDING_SETUP_AGREEMENT_SUNRISE2_B'
    PENDING_SETUP_AGREEMENT_SUNRISE2_C = 'PENDING_SETUP_AGREEMENT_SUNRISE2_C'
    PENDING_SETUP_AUTH = 'PENDING_SETUP_AUTH'
    PENDING_SETUP_DNS = 'PENDING_SETUP_DNS'
    PENDING_SETUP_FAILED = 'PENDING_SETUP_FAILED'
    PENDING_SETUP_REVIEW = 'PENDING_SETUP_REVIEW'
    PENDING_SETUP_SUNRISE = 'PENDING_SETUP_SUNRISE'
    PENDING_SETUP_SUNRISE_PRE = 'PENDING_SETUP_SUNRISE_PRE'
    PENDING_SETUP_SUNRISE_RESPONSE = 'PENDING_SETUP_SUNRISE_RESPONSE'
    PENDING_SUBMIT_FAILURE = 'PENDING_SUBMIT_FAILURE'
    PENDING_SUBMIT_FIREHOSE = 'PENDING_SUBMIT_FIREHOSE'
    PENDING_SUBMIT_HOLD_FIREHOSE = 'PENDING_SUBMIT_HOLD_FIREHOSE'
    PENDING_SUBMIT_HOLD_LANDRUSH = 'PENDING_SUBMIT_HOLD_LANDRUSH'
    PENDING_SUBMIT_HOLD_SUNRISE = 'PENDING_SUBMIT_HOLD_SUNRISE'
    PENDING_SUBMIT_LANDRUSH = 'PENDING_SUBMIT_LANDRUSH'
    PENDING_SUBMIT_RESPONSE_FIREHOSE = 'PENDING_SUBMIT_RESPONSE_FIREHOSE'
    PENDING_SUBMIT_RESPONSE_LANDRUSH = 'PENDING_SUBMIT_RESPONSE_LANDRUSH'
    PENDING_SUBMIT_RESPONSE_SUNRISE = 'PENDING_SUBMIT_RESPONSE_SUNRISE'
    PENDING_SUBMIT_SUCCESS_FIREHOSE = 'PENDING_SUBMIT_SUCCESS_FIREHOSE'
    PENDING_SUBMIT_SUCCESS_LANDRUSH = 'PENDING_SUBMIT_SUCCESS_LANDRUSH'
    PENDING_SUBMIT_SUCCESS_SUNRISE = 'PENDING_SUBMIT_SUCCESS_SUNRISE'
    PENDING_SUBMIT_SUNRISE = 'PENDING_SUBMIT_SUNRISE'
    PENDING_SUBMIT_WAITING_LANDRUSH = 'PENDING_SUBMIT_WAITING_LANDRUSH'
    PENDING_SUCCESS_PRE_REGISTRATION = 'PENDING_SUCCESS_PRE_REGISTRATION'
    PENDING_SUSPENDED_DATA_QUALITY = 'PENDING_SUSPENDED_DATA_QUALITY'
    PENDING_TRANSFER_ACK_PREMIUM = 'PENDING_TRANSFER_ACK_PREMIUM'
    PENDING_TRANSFER_IN = 'PENDING_TRANSFER_IN'
    PENDING_TRANSFER_IN_ACK = 'PENDING_TRANSFER_IN_ACK'
    PENDING_TRANSFER_IN_ACK_PREMIUM = 'PENDING_TRANSFER_IN_ACK_PREMIUM'
    PENDING_TRANSFER_IN_BAD_REGISTRANT = 'PENDING_TRANSFER_IN_BAD_REGISTRANT'
    PENDING_TRANSFER_IN_CANCEL = 'PENDING_TRANSFER_IN_CANCEL'
    PENDING_TRANSFER_IN_CANCEL_REGISTRY = 'PENDING_TRANSFER_IN_CANCEL_REGISTRY'
    PENDING_TRANSFER_IN_COMPLETE_ACK = 'PENDING_TRANSFER_IN_COMPLETE_ACK'
    PENDING_TRANSFER_IN_DELETE = 'PENDING_TRANSFER_IN_DELETE'
    PENDING_TRANSFER_IN_LOCK = 'PENDING_TRANSFER_IN_LOCK'
    PENDING_TRANSFER_IN_NACK = 'PENDING_TRANSFER_IN_NACK'
    PENDING_TRANSFER_IN_NOTIFICATION = 'PENDING_TRANSFER_IN_NOTIFICATION'
    PENDING_TRANSFER_IN_PREMIUM = 'PENDING_TRANSFER_IN_PREMIUM'
    PENDING_TRANSFER_IN_RELEASE = 'PENDING_TRANSFER_IN_RELEASE'
    PENDING_TRANSFER_IN_RESPONSE = 'PENDING_TRANSFER_IN_RESPONSE'
    PENDING_TRANSFER_IN_UNDERAGE = 'PENDING_TRANSFER_IN_UNDERAGE'
    PENDING_TRANSFER_OUT = 'PENDING_TRANSFER_OUT'
    PENDING_TRANSFER_OUT_ACK = 'PENDING_TRANSFER_OUT_ACK'
    PENDING_TRANSFER_OUT_NACK = 'PENDING_TRANSFER_OUT_NACK'
    PENDING_TRANSFER_OUT_PREMIUM = 'PENDING_TRANSFER_OUT_PREMIUM'
    PENDING_TRANSFER_OUT_UNDERAGE = 'PENDING_TRANSFER_OUT_UNDERAGE'
    PENDING_TRANSFER_OUT_VALIDATION = 'PENDING_TRANSFER_OUT_VALIDATION'
    PENDING_TRANSFER_PREMIUM = 'PENDING_TRANSFER_PREMIUM'
    PENDING_TRANSFER_PREMUIM = 'PENDING_TRANSFER_PREMUIM'
    PENDING_TRANSFER_SUBMIT_PREMIUM = 'PENDING_TRANSFER_SUBMIT_PREMIUM'
    PENDING_UNLOCK_DATA_QUALITY = 'PENDING_UNLOCK_DATA_QUALITY'
    PENDING_UNLOCK_PREMIUM = 'PENDING_UNLOCK_PREMIUM'
    PENDING_UPDATE = 'PENDING_UPDATE'
    PENDING_UPDATED_REGISTRANT_DATA_QUALITY = 'PENDING_UPDATED_REGISTRANT_DATA_QUALITY'
    PENDING_UPDATE_ACCOUNT = 'PENDING_UPDATE_ACCOUNT'
    PENDING_UPDATE_API = 'PENDING_UPDATE_API'
    PENDING_UPDATE_API_RESPONSE = 'PENDING_UPDATE_API_RESPONSE'
    PENDING_UPDATE_AUTH = 'PENDING_UPDATE_AUTH'
    PENDING_UPDATE_CONTACTS = 'PENDING_UPDATE_CONTACTS'
    PENDING_UPDATE_CONTACTS_PRIVACY = 'PENDING_UPDATE_CONTACTS_PRIVACY'
    PENDING_UPDATE_DNS = 'PENDING_UPDATE_DNS'
    PENDING_UPDATE_DNS_SECURITY = 'PENDING_UPDATE_DNS_SECURITY'
    PENDING_UPDATE_ELIGIBILITY = 'PENDING_UPDATE_ELIGIBILITY'
    PENDING_UPDATE_EPP_CONTACTS = 'PENDING_UPDATE_EPP_CONTACTS'
    PENDING_UPDATE_MEMBERSHIP = 'PENDING_UPDATE_MEMBERSHIP'
    PENDING_UPDATE_OWNERSHIP = 'PENDING_UPDATE_OWNERSHIP'
    PENDING_UPDATE_OWNERSHIP_AUTH_AUCTION = 'PENDING_UPDATE_OWNERSHIP_AUTH_AUCTION'
    PENDING_UPDATE_OWNERSHIP_HELD = 'PENDING_UPDATE_OWNERSHIP_HELD'
    PENDING_UPDATE_REGISTRANT = 'PENDING_UPDATE_REGISTRANT'
    PENDING_UPDATE_REPO = 'PENDING_UPDATE_REPO'
    PENDING_VALIDATION_DATA_QUALITY = 'PENDING_VALIDATION_DATA_QUALITY'
    PENDING_VERIFICATION_FRAUD = 'PENDING_VERIFICATION_FRAUD'
    PENDING_VERIFICATION_STATUS = 'PENDING_VERIFICATION_STATUS'
    PENDING_VERIFY_REGISTRANT_DATA_QUALITY = 'PENDING_VERIFY_REGISTRANT_DATA_QUALITY'
    RESERVED = 'RESERVED'
    RESERVED_PREMIUM = 'RESERVED_PREMIUM'
    REVERTED = 'REVERTED'
    SUSPENDED_VERIFICATION_ICANN = 'SUSPENDED_VERIFICATION_ICANN'
    TRANSFERRED_OUT = 'TRANSFERRED_OUT'
    UNLOCKED_ABUSE = 'UNLOCKED_ABUSE'
    UNLOCKED_SUPER = 'UNLOCKED_SUPER'
    UNPARKED_AND_UNHELD = 'UNPARKED_AND_UNHELD'
    UPDATED_OWNERSHIP = 'UPDATED_OWNERSHIP'
    UPDATED_OWNERSHIP_HELD = 'UPDATED_OWNERSHIP_HELD'


class StatusGroup(Enum):
    INACTIVE = 'INACTIVE'
    PRE_REGISTRATION = 'PRE_REGISTRATION'
    REDEMPTION = 'REDEMPTION'
    RENEWABLE = 'RENEWABLE'
    VERIFICATION_ICANN = 'VERIFICATION_ICANN'
    VISIBLE = 'VISIBLE'


class Include(Enum):
    authCode = 'authCode'
    contacts = 'contacts'
    nameServers = 'nameServers'


class V1DomainsGetResponse(RootModel[List[DomainSummary]]):
    root: List[DomainSummary]


class Statuses(RootModel[List[Status8]]):
    root: List[Status8]


class StatusGroups(RootModel[List[StatusGroup]]):
    root: List[StatusGroup]


class Includes(RootModel[List[Include]]):
    root: List[Include]


class V1DomainsAgreementsGetResponse(RootModel[List[LegalAgreement]]):
    root: List[LegalAgreement]


class Tlds(RootModel[List[str]]):
    root: List[str]


class CheckType(Enum):
    FAST = 'FAST'
    FULL = 'FULL'
    fast = 'fast'
    full = 'full'


class V1DomainsAvailablePostRequest(RootModel[List[str]]):
    root: List[str] = Field(..., le=500)


class Source(Enum):
    CC_TLD = 'CC_TLD'
    EXTENSION = 'EXTENSION'
    KEYWORD_SPIN = 'KEYWORD_SPIN'
    PREMIUM = 'PREMIUM'
    cctld = 'cctld'
    extension = 'extension'
    keywordspin = 'keywordspin'
    premium = 'premium'


class V1DomainsSuggestGetResponse(RootModel[List[DomainSuggestion]]):
    root: List[DomainSuggestion]


class Sources(RootModel[List[Source]]):
    root: List[Source]


class V1DomainsTldsGetResponse(RootModel[List[TldSummary]]):
    root: List[TldSummary]


class V1DomainsDomainRecordsPutRequest(RootModel[List[DNSRecord]]):
    root: List[DNSRecord]


class V1DomainsDomainRecordsTypePutRequest(RootModel[List[DNSRecordCreateType]]):
    root: List[DNSRecordCreateType]


class Type9(Enum):
    A = 'A'
    AAAA = 'AAAA'
    CNAME = 'CNAME'
    MX = 'MX'
    NS = 'NS'
    SOA = 'SOA'
    SRV = 'SRV'
    TXT = 'TXT'


class Type10(Enum):
    A = 'A'
    AAAA = 'AAAA'
    CNAME = 'CNAME'
    MX = 'MX'
    SRV = 'SRV'
    TXT = 'TXT'


class V1DomainsDomainRecordsTypeNameGetResponse(RootModel[List[DNSRecord]]):
    root: List[DNSRecord]


class Type11(Enum):
    A = 'A'
    AAAA = 'AAAA'
    CNAME = 'CNAME'
    MX = 'MX'
    NS = 'NS'
    SOA = 'SOA'
    SRV = 'SRV'
    TXT = 'TXT'


class V1DomainsDomainRecordsTypeNamePutRequest(
    RootModel[List[DNSRecordCreateTypeName]]
):
    root: List[DNSRecordCreateTypeName]


class V2CustomersCustomerIdDomainsNotificationsOptInGetResponse(
    RootModel[List[DomainNotification]]
):
    root: List[DomainNotification]


class Type13(Enum):
    AUTH_CODE_PURCHASE = 'AUTH_CODE_PURCHASE'
    AUTH_CODE_REGENERATE = 'AUTH_CODE_REGENERATE'
    AUTO_RENEWAL = 'AUTO_RENEWAL'
    BACKORDER = 'BACKORDER'
    BACKORDER_PURCHASE = 'BACKORDER_PURCHASE'
    BACKORDER_DELETE = 'BACKORDER_DELETE'
    BACKORDER_UPDATE = 'BACKORDER_UPDATE'
    CONTACT_CREATE = 'CONTACT_CREATE'
    CONTACT_DELETE = 'CONTACT_DELETE'
    CONTACT_UPDATE = 'CONTACT_UPDATE'
    DNS_VERIFICATION = 'DNS_VERIFICATION'
    DNSSEC_CREATE = 'DNSSEC_CREATE'
    DNSSEC_DELETE = 'DNSSEC_DELETE'
    DOMAIN_DELETE = 'DOMAIN_DELETE'
    DOMAIN_UPDATE = 'DOMAIN_UPDATE'
    DOMAIN_UPDATE_CONTACTS = 'DOMAIN_UPDATE_CONTACTS'
    DOMAIN_UPDATE_NAME_SERVERS = 'DOMAIN_UPDATE_NAME_SERVERS'
    EXPIRY = 'EXPIRY'
    HOST_CREATE = 'HOST_CREATE'
    HOST_DELETE = 'HOST_DELETE'
    ICANN_VERIFICATION = 'ICANN_VERIFICATION'
    MIGRATE = 'MIGRATE'
    MIGRATE_IN = 'MIGRATE_IN'
    PREMIUM = 'PREMIUM'
    PRIVACY_PURCHASE = 'PRIVACY_PURCHASE'
    PRIVACY_DELETE = 'PRIVACY_DELETE'
    REDEEM = 'REDEEM'
    REGISTER = 'REGISTER'
    RENEW = 'RENEW'
    RENEW_UNDO = 'RENEW_UNDO'
    TRADE = 'TRADE'
    TRADE_CANCEL = 'TRADE_CANCEL'
    TRADE_PURCHASE = 'TRADE_PURCHASE'
    TRADE_PURCHASE_AUTH_TEXT_MESSAGE = 'TRADE_PURCHASE_AUTH_TEXT_MESSAGE'
    TRADE_RESEND_AUTH_EMAIL = 'TRADE_RESEND_AUTH_EMAIL'
    TRANSFER = 'TRANSFER'
    TRANSFER_IN = 'TRANSFER_IN'
    TRANSFER_IN_CANCEL = 'TRANSFER_IN_CANCEL'
    TRANSFER_OUT = 'TRANSFER_OUT'
    TRANSFER_OUT_ACCEPT = 'TRANSFER_OUT_ACCEPT'
    TRANSFER_OUT_REJECT = 'TRANSFER_OUT_REJECT'
    TRANSFER_OUT_REQUESTED = 'TRANSFER_OUT_REQUESTED'
    TRANSIT = 'TRANSIT'


class Types(RootModel[List[Type13]]):
    root: List[Type13]


class Type15(Enum):
    AUTO_RENEWAL = 'AUTO_RENEWAL'
    BACKORDER = 'BACKORDER'
    BACKORDER_PURCHASE = 'BACKORDER_PURCHASE'
    EXPIRY = 'EXPIRY'
    PREMIUM = 'PREMIUM'
    PRIVACY_PURCHASE = 'PRIVACY_PURCHASE'
    REDEEM = 'REDEEM'
    REGISTER = 'REGISTER'
    RENEW = 'RENEW'
    TRADE = 'TRADE'
    TRANSFER = 'TRANSFER'


class Include2(Enum):
    actions = 'actions'
    contacts = 'contacts'
    dnssecRecords = 'dnssecRecords'
    registryStatusCodes = 'registryStatusCodes'


class Includes1(RootModel[List[Include2]]):
    root: List[Include2]


class Type16(Enum):
    AUTH_CODE_PURCHASE = 'AUTH_CODE_PURCHASE'
    AUTH_CODE_REGENERATE = 'AUTH_CODE_REGENERATE'
    BACKORDER_PURCHASE = 'BACKORDER_PURCHASE'
    BACKORDER_DELETE = 'BACKORDER_DELETE'
    BACKORDER_UPDATE = 'BACKORDER_UPDATE'
    DNSSEC_CREATE = 'DNSSEC_CREATE'
    DNSSEC_DELETE = 'DNSSEC_DELETE'
    DOMAIN_DELETE = 'DOMAIN_DELETE'
    DOMAIN_UPDATE = 'DOMAIN_UPDATE'
    DOMAIN_UPDATE_CONTACTS = 'DOMAIN_UPDATE_CONTACTS'
    DOMAIN_UPDATE_NAME_SERVERS = 'DOMAIN_UPDATE_NAME_SERVERS'
    MIGRATE = 'MIGRATE'
    PRIVACY_PURCHASE = 'PRIVACY_PURCHASE'
    PRIVACY_DELETE = 'PRIVACY_DELETE'
    REDEEM = 'REDEEM'
    REGISTER = 'REGISTER'
    RENEW = 'RENEW'
    RENEW_UNDO = 'RENEW_UNDO'
    TRADE = 'TRADE'
    TRADE_CANCEL = 'TRADE_CANCEL'
    TRADE_PURCHASE = 'TRADE_PURCHASE'
    TRADE_PURCHASE_AUTH_TEXT_MESSAGE = 'TRADE_PURCHASE_AUTH_TEXT_MESSAGE'
    TRADE_RESEND_AUTH_EMAIL = 'TRADE_RESEND_AUTH_EMAIL'
    TRANSFER = 'TRANSFER'
    TRANSFER_IN_CANCEL = 'TRANSFER_IN_CANCEL'
    TRANSFER_OUT_ACCEPT = 'TRANSFER_OUT_ACCEPT'
    TRANSFER_OUT_REJECT = 'TRANSFER_OUT_REJECT'
    TRANSFER_OUT_REQUESTED = 'TRANSFER_OUT_REQUESTED'
    TRANSIT = 'TRANSIT'


class Type17(Enum):
    AUTH_CODE_PURCHASE = 'AUTH_CODE_PURCHASE'
    AUTH_CODE_REGENERATE = 'AUTH_CODE_REGENERATE'
    AUTO_RENEWAL = 'AUTO_RENEWAL'
    BACKORDER_PURCHASE = 'BACKORDER_PURCHASE'
    BACKORDER_DELETE = 'BACKORDER_DELETE'
    BACKORDER_UPDATE = 'BACKORDER_UPDATE'
    DNS_VERIFICATION = 'DNS_VERIFICATION'
    DNSSEC_CREATE = 'DNSSEC_CREATE'
    DNSSEC_DELETE = 'DNSSEC_DELETE'
    DOMAIN_DELETE = 'DOMAIN_DELETE'
    DOMAIN_UPDATE = 'DOMAIN_UPDATE'
    DOMAIN_UPDATE_CONTACTS = 'DOMAIN_UPDATE_CONTACTS'
    DOMAIN_UPDATE_NAME_SERVERS = 'DOMAIN_UPDATE_NAME_SERVERS'
    EXPIRY = 'EXPIRY'
    ICANN_VERIFICATION = 'ICANN_VERIFICATION'
    MIGRATE = 'MIGRATE'
    MIGRATE_IN = 'MIGRATE_IN'
    PREMIUM = 'PREMIUM'
    PRIVACY_PURCHASE = 'PRIVACY_PURCHASE'
    PRIVACY_DELETE = 'PRIVACY_DELETE'
    REDEEM = 'REDEEM'
    REGISTER = 'REGISTER'
    RENEW = 'RENEW'
    RENEW_UNDO = 'RENEW_UNDO'
    TRADE = 'TRADE'
    TRADE_CANCEL = 'TRADE_CANCEL'
    TRADE_PURCHASE = 'TRADE_PURCHASE'
    TRADE_PURCHASE_AUTH_TEXT_MESSAGE = 'TRADE_PURCHASE_AUTH_TEXT_MESSAGE'
    TRADE_RESEND_AUTH_EMAIL = 'TRADE_RESEND_AUTH_EMAIL'
    TRANSFER = 'TRANSFER'
    TRANSFER_IN = 'TRANSFER_IN'
    TRANSFER_IN_CANCEL = 'TRANSFER_IN_CANCEL'
    TRANSFER_OUT = 'TRANSFER_OUT'
    TRANSFER_OUT_ACCEPT = 'TRANSFER_OUT_ACCEPT'
    TRANSFER_OUT_REJECT = 'TRANSFER_OUT_REJECT'
    TRANSFER_OUT_REQUESTED = 'TRANSFER_OUT_REQUESTED'
    TRANSIT = 'TRANSIT'


class Status10(Enum):
    ACTIVE = 'ACTIVE'
    CANCELLED = 'CANCELLED'


class ActionReason(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    code: constr(pattern=r'^[A-Z_][A-Z0-9_]*$') = Field(
        ...,
        description='Short identifier, suitable for indicating the reason for the current status and how to handle within client code',
    )
    fields: Optional[List[ErrorField]] = Field(
        None,
        description='List of the specific fields, and the errors found with their contents',
    )
    message: Optional[str] = Field(
        None, description='Human-readable, English description of the code'
    )


class ArrayOfDNSRecord(RootModel[List[DNSRecord]]):
    root: List[DNSRecord]


class DomainAvailableBulk(BaseModel):
    domains: List[DomainAvailableResponse] = Field(
        ..., description='Domain available response array'
    )


class DomainAvailableBulkMixed(BaseModel):
    domains: List[DomainAvailableResponse] = Field(
        ..., description='Domain available response array'
    )
    errors: Optional[List[DomainAvailableError]] = Field(
        None, description='Errors encountered while performing a domain available check'
    )


class DomainDetail(BaseModel):
    authCode: str = Field(
        ..., description='Authorization code for transferring the Domain'
    )
    contactAdmin: Contact
    contactBilling: Contact
    contactRegistrant: Contact
    contactTech: Contact
    createdAt: datetime = Field(
        ..., description='Date and time when this domain was created'
    )
    deletedAt: Optional[datetime] = Field(
        None, description='Date and time when this domain was deleted'
    )
    domain: str = Field(..., description='Name of the domain')
    domainId: float = Field(..., description='Unique identifier for this Domain')
    expirationProtected: bool = Field(
        ..., description='Whether or not the domain is protected from expiration'
    )
    expires: Optional[datetime] = Field(
        None, description='Date and time when this domain will expire'
    )
    exposeWhois: Optional[bool] = Field(
        None,
        description='Whether or not the domain contact details should be shown in the WHOIS',
    )
    holdRegistrar: bool = Field(
        ..., description='Whether or not the domain is on-hold by the registrar'
    )
    locked: bool = Field(
        ..., description='Whether or not the domain is locked to prevent transfers'
    )
    nameServers: List[str] = Field(
        ..., description='Fully-qualified domain names for DNS servers'
    )
    privacy: bool = Field(
        ..., description='Whether or not the domain has privacy protection'
    )
    registrarCreatedAt: Optional[str] = Field(
        None, description='Date and time when this domain was created by the registrar'
    )
    renewAuto: bool = Field(
        ...,
        description='Whether or not the domain is configured to automatically renew',
    )
    renewDeadline: datetime = Field(..., description='Date the domain must renew on')
    status: str = Field(
        ...,
        description="Processing status of the domain<br/><ul>\n<li><strong style='margin-left: 12px;'>ACTIVE</strong> - All is well</li>\n<li><strong style='margin-left: 12px;'>AWAITING*</strong> - System is waiting for the end-user to complete an action</li>\n<li><strong style='margin-left: 12px;'>CANCELLED*</strong> - Domain has been cancelled, and may or may not be reclaimable</li>\n<li><strong style='margin-left: 12px;'>CONFISCATED</strong> - Domain has been confiscated, usually for abuse, chargeback, or fraud</li>\n<li><strong style='margin-left: 12px;'>DISABLED*</strong> - Domain has been disabled</li>\n<li><strong style='margin-left: 12px;'>EXCLUDED*</strong> - Domain has been excluded from Firehose registration</li>\n<li><strong style='margin-left: 12px;'>EXPIRED*</strong> - Domain has expired</li>\n<li><strong style='margin-left: 12px;'>FAILED*</strong> - Domain has failed a required action, and the system is no longer retrying</li>\n<li><strong style='margin-left: 12px;'>HELD*</strong> - Domain has been placed on hold, and likely requires intervention from Support</li>\n<li><strong style='margin-left: 12px;'>LOCKED*</strong> - Domain has been locked, and likely requires intervention from Support</li>\n<li><strong style='margin-left: 12px;'>PARKED*</strong> - Domain has been parked, and likely requires intervention from Support</li>\n<li><strong style='margin-left: 12px;'>PENDING*</strong> - Domain is working its way through an automated workflow</li>\n<li><strong style='margin-left: 12px;'>RESERVED*</strong> - Domain is reserved, and likely requires intervention from Support</li>\n<li><strong style='margin-left: 12px;'>REVERTED</strong> - Domain has been reverted, and likely requires intervention from Support</li>\n<li><strong style='margin-left: 12px;'>SUSPENDED*</strong> - Domain has been suspended, and likely requires intervention from Support</li>\n<li><strong style='margin-left: 12px;'>TRANSFERRED*</strong> - Domain has been transferred out</li>\n<li><strong style='margin-left: 12px;'>UNKNOWN</strong> - Domain is in an unknown state</li>\n<li><strong style='margin-left: 12px;'>UNLOCKED*</strong> - Domain has been unlocked, and likely requires intervention from Support</li>\n<li><strong style='margin-left: 12px;'>UNPARKED*</strong> - Domain has been unparked, and likely requires intervention from Support</li>\n<li><strong style='margin-left: 12px;'>UPDATED*</strong> - Domain ownership has been transferred to another account</li>\n</ul>",
    )
    subaccountId: Optional[str] = Field(
        None, description='Reseller subaccount shopperid who can manage the domain'
    )
    transferAwayEligibleAt: Optional[datetime] = Field(
        None, description='Date and time when this domain is eligible to transfer'
    )
    transferProtected: bool = Field(
        ..., description='Whether or not the domain is protected from transfer'
    )
    verifications: Optional[VerificationsDomain] = None


class DomainForwarding(BaseModel):
    fqdn: str = Field(
        ...,
        description='The fqdn (domain or sub domain) to forward (ex somedomain.com or sub.somedomain.com)',
    )
    mask: Optional[DomainForwardingMask] = None
    type: Type2 = Field(
        ...,
        description="The type of fowarding to implement<br/><ul><li><strong style='margin-left: 12px;'>MASKED</strong> - Prevents the forwarded domain or subdomain URL from displaying in the browser's address bar.</li><li><strong style='margin-left: 12px;'>REDIRECT_PERMANENT*</strong> - Redirects to the url you specified in the forwardTo field using a `301 Moved Permanently` HTTP response. The HTTP 301 response code tells user-agents (including search engines) that the location has permanently moved.</li><li><strong style='margin-left: 12px;'>REDIRECT_TEMPORARY</strong> - Redirects to the url you specified in the forwardTo field using a `302 Found` HTTP response. The HTTP 302 response code tells user-agents (including search engines) that the location has temporarily moved.</li></ul>",
    )
    url: str = Field(
        ...,
        description='Forwards http(s) traffic to this destination url (ex. http://www.somedomain.com/)',
    )


class DomainForwardingCreate(BaseModel):
    mask: Optional[DomainForwardingMask] = None
    type: Type2 = Field(
        ...,
        description="The type of fowarding to implement<br/><ul><li><strong style='margin-left: 12px;'>MASKED</strong> - Prevents the forwarded domain or subdomain URL from displaying in the browser's address bar.</li><li><strong style='margin-left: 12px;'>REDIRECT_PERMANENT*</strong> - Redirects to the url you specified in the forwardTo field using a `301 Moved Permanently` HTTP response. The HTTP 301 response code tells user-agents (including search engines) that the location has permanently moved.</li><li><strong style='margin-left: 12px;'>REDIRECT_TEMPORARY</strong> - Redirects to the url you specified in the forwardTo field using a `302 Found` HTTP response. The HTTP 302 response code tells user-agents (including search engines) that the location has temporarily moved.</li></ul>",
    )
    url: str = Field(
        ...,
        description='Forwards http(s) traffic to this destination url (ex. http://www.somedomain.com/)',
    )


class Error(BaseModel):
    code: str = Field(
        ...,
        description='Short identifier for the error, suitable for indicating the specific error within client code',
    )
    fields: Optional[List[ErrorField]] = Field(
        None,
        description='List of the specific fields, and the errors found with their contents',
    )
    message: Optional[str] = Field(
        None, description='Human-readable, English description of the error'
    )


class ErrorDomainContactsValidate(BaseModel):
    code: str = Field(
        ...,
        description='Short identifier for the error, suitable for indicating the specific error within client code',
    )
    fields: Optional[List[ErrorFieldDomainContactsValidate]] = Field(
        None,
        description='List of the specific fields, and the errors found with their contents',
    )
    message: Optional[str] = Field(
        None, description='Human-readable, English description of the error'
    )
    stack: Optional[List[str]] = Field(
        None,
        description='Stack trace indicating where the error occurred.<br/>NOTE: This attribute <strong>MAY</strong> be included for Development and Test environments. However, it <strong>MUST NOT</strong> be exposed from OTE nor Production systems',
    )


class MaintenanceDetail(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    createdAt: str = Field(
        ..., description='Date and time (UTC) when this maintenance was created'
    )
    endsAt: str = Field(
        ..., description='Date and time (UTC) when this maintenance will complete'
    )
    environment: Environment = Field(
        ...,
        description="The environment on which the maintenance will be performed<br/><ul><li><strong style='margin-left: 12px;'>OTE</strong> - The Operational Testing Environment.</li><li><strong style='margin-left: 12px;'>PRODUCTION</strong> - The Live Production Environment.</li></ul>",
    )
    maintenanceId: str = Field(
        ..., description='The identifier for the system maintenance'
    )
    modifiedAt: str = Field(
        ..., description='Date and time (UTC) when this maintenance was last modified'
    )
    reason: Reason = Field(
        ...,
        description="The reason for the maintenance being performed<br/><ul><li><strong style='margin-left: 12px;'>EMERGENCY</strong> - Unexpected Emergency maintenance.</li><li><strong style='margin-left: 12px;'>PLANNED</strong> - Planned system maintenance.</li></ul>",
    )
    startsAt: str = Field(
        ..., description='Date and time (UTC) when this maintenance will start'
    )
    status: Status3 = Field(
        ...,
        description="The status of maintenance<br/><ul><li><strong style='margin-left: 12px;'>ACTIVE</strong> - The upcoming maintenance is active.</li><li><strong style='margin-left: 12px;'>CANCELLED</strong> - The upcoming maintenance has been cancelled.</li></ul>",
    )
    summary: str = Field(
        ..., description='A brief description of what is being performed'
    )
    systems: Optional[List[MaintenanceSystem]] = Field(
        None, description='List of systems that are impacted by the maintenance.'
    )
    tlds: Optional[List[str]] = Field(
        None,
        description='List of tlds that are in maintenance.  Generally only applies when `type` is REGISTRY',
    )
    type: Type6 = Field(
        ...,
        description="The type of maintenance being performed<br/><ul><li><strong style='margin-left: 12px;'>API</strong> - Programmatic Api components.</li><li><strong style='margin-left: 12px;'>REGISTRY</strong> - The underlying Registry providing the tld(s).</li><li><strong style='margin-left: 12px;'>UI</strong> - User Interface components.</li></ul>",
    )


class V2CustomersCustomerIdDomainsForwardsFqdnGetResponse(
    RootModel[List[DomainForwarding]]
):
    root: List[DomainForwarding]


class Action(BaseModel):
    completedAt: Optional[str] = Field(
        None, description='Timestamp indicating when the action was completed'
    )
    createdAt: str = Field(
        ..., description='Timestamp indicating when the action was created'
    )
    modifiedAt: Optional[str] = Field(
        None, description='Timestamp indicating when the action was last modified'
    )
    origination: Origination = Field(
        ...,
        description="The origination of the action<br/><ul><li><strong style='margin-left: 12px;'>USER</strong> - These are user requests.</li><li><strong style='margin-left: 12px;'>SYSTEM</strong> - These are system processing actions.</li></ul>",
    )
    reason: Optional[ActionReason] = None
    requestId: Optional[str] = Field(
        None,
        description='A client provided identifier (via X-Request-Id header) used for tracking individual requests',
    )
    startedAt: Optional[str] = Field(
        None, description='Timestamp indicating when the action was started'
    )
    status: Status = Field(
        ...,
        description="The current status of the action<br/><ul><li><strong style='margin-left: 12px;'>ACCEPTED</strong> - The action has been queued, processing has not started.</li><li><strong style='margin-left: 12px;'>AWAITING</strong> - The action is waiting on a user input.</li><li><strong style='margin-left: 12px;'>CANCELLED</strong> - The action has been cancelled by the user.</li><li><strong style='margin-left: 12px;'>FAILED</strong> - An error occurred while the action was processing, no more processing will be performed.</li><li><strong style='margin-left: 12px;'>PENDING</strong> - The action is being processed.</li><li><strong style='margin-left: 12px;'>SUCCESS</strong> - The action has completed, no additional processing is required.</li></ul>",
    )
    type: Type = Field(
        ...,
        description="The type of action being performed<br/><ul><li><strong style='margin-left: 12px;'>AUTH_CODE_PURCHASE</strong> - Request for an auth code for a .de domain via POST /v2/customers/{customerId}/domains/{domain}/purchaseAuthCode.</li><li><strong style='margin-left: 12px;'>AUTH_CODE_REGENERATE</strong> - Request to regenerate the authCode for a domain via POST /v2/customers/{customerId}/domains/{domain}/regenerateAuthCode</li><li><strong style='margin-left: 12px;'>AUTO_RENEWAL</strong> - A Domain Auto Renew is in progress.</li><li><strong style='margin-left: 12px;'>BACKORDER_PURCHASE</strong> - Request to purchase a domain backorder via POST /v2/customers/{customerId}/domains/backorders/purchase.</li><li><strong style='margin-left: 12px;'>BACKORDER_DELETE</strong> - Request to cancel the current domain backorder via DELETE /v2/customers/{customerId}/domains/backorders/{domain}.</li><li><strong style='margin-left: 12px;'>BACKORDER_UPDATE</strong> - Request update the current domain backorder via PATCH /v2/customers/{customerId}/domains/backorders/{domain}.</li><li><strong style='margin-left: 12px;'>CONTACT_CREATE</strong> - Request to create a contact via POST /v2/customers/{customerId}/domains/contacts.</li><li><strong style='margin-left: 12px;'>CONTACT_DELETE</strong> - Request to delete a contact via DELETE /v2/customers/{customerId}/domains/contacts/{contactId}</li><li><strong style='margin-left: 12px;'>CONTACT_UPDATE</strong> - Request to update a contact via PATCH /v2/customers/{customerId}/domains/contacts/{contactId}</li><li><strong style='margin-left: 12px;'>DNS_VERIFICATION</strong> - Domain requires zone file setup.</li><li><strong style='margin-left: 12px;'>DNSSEC_CREATE</strong> - Request to create DNSSEC record for the domain via PATCH /v2/customers/{customerId}/domains/{domain}/dnssecRecords.</li><li><strong style='margin-left: 12px;'>DNSSEC_DELETE</strong> - Request to delete DNSSEC record for the domain via DELETE /v2/customers/{customerId}/domains/{domain}/dnssecRecords.</li><li><strong style='margin-left: 12px;'>DOMAIN_DELETE</strong> - Request to delete the domain via DELETE /v2/customers/{customerId}/domains/{domain}</li><li><strong style='margin-left: 12px;'>DOMAIN_UPDATE</strong> - Request to update the domain via PATCH /v2/customers/{customerId}/domains/{domain}</li><li><strong style='margin-left: 12px;'>DOMAIN_UPDATE_CONTACTS</strong> -Request to update the domain contacts via PATCH /v2/customers/{customerId}/domains/{domain}/contacts</li><li><strong style='margin-left: 12px;'>DOMAIN_UPDATE_NAME_SERVERS</strong> - Request to update the domain name servers via PUT /v2/customers/{customerId}/domains/{domain}/nameServers</li><li><strong style='margin-left: 12px;'>EXPIRY</strong> - A Domain Expiration is in progress.</li><li><strong style='margin-left: 12px;'>HOST_CREATE</strong> - Request to create a hostname via PUT /v2/customers/{customerId}/domains/{domain}/hosts/{hostname}</li><li><strong style='margin-left: 12px;'>HOST_DELETE</strong> - Request to delete a hostname via DELETE /v2/customers/{customerId}/domains/{domain}/hosts/{hostname}</li><li><strong style='margin-left: 12px;'>ICANN_VERIFICATION</strong> - Domain requires registrant verification for Icann.</li><li><strong style='margin-left: 12px;'>PREMIUM</strong> - Premium Domain domain sale is in progress.</li><li><strong style='margin-left: 12px;'>PRIVACY_PURCHASE</strong> - Request to purchase privacy for a domain via POST /v2/customers/{customerId}/domains/{domain}/privacy/purchase</li><li><strong style='margin-left: 12px;'>PRIVACY_DELETE</strong> - Request to remove privacy from a domain via DELETE /v2/customers/{customerId}/domains/{domain}/privacy</li><li><strong style='margin-left: 12px;'>REDEEM</strong> - Request to redeem a domain via POST /v2/customers/{customerId}/domains/{domain}/redeem</li><li><strong style='margin-left: 12px;'>REGISTER</strong> - Request to register a domain via POST /v2/customers/{customerId}/domains/{domain}/register</li><li><strong style='margin-left: 12px;'>RENEW</strong> - Request to renew a domain via POST /v2/customers/{customerId}/domains/{domain}/renew</li><li><strong style='margin-left: 12px;'>RENEW_UNDO</strong> - Request to undo a renewal for a uk domain via POST /v2/customers/{customerId}/domains/{domain}/undoRenew</li><li><strong style='margin-left: 12px;'>TRADE</strong> - A domain trade request is in progress</li><li><strong style='margin-left: 12px;'>TRADE_CANCEL</strong> - Request to cancel a trade for a domain via POST /v2/customers/{customerId}/domains/{domain}/tradeCancel</li><li><strong style='margin-left: 12px;'>TRADE_PURCHASE</strong> - Request to purchase a trade for a domain via POST /v2/customers/{customerId}/domains/{domain}/tradePurchase</li><li><strong style='margin-left: 12px;'>TRADE_PURCHASE_AUTH_TEXT_MESSAGE</strong> - Request for a trade purchase text message for a domain via POST /v2/customers/{customerId}/domains/{domain}/tradePurchaseAuthorizationTextMessage</li><li><strong style='margin-left: 12px;'>TRADE_RESEND_AUTH_EMAIL</strong> - Request to resend the trade auth email message for a domain via POST /v2/customers/{customerId}/domains/{domain}/tradeResendAuthorizationEmail</li><li><strong style='margin-left: 12px;'>TRANSFER</strong> - Request to transfer a domain via POST /v2/customers/{customerId}/domains/{domain}/transfer</li><li><strong style='margin-left: 12px;'>TRANSFER_IN</strong> - A domain transfer in request is in progress.</li><li><strong style='margin-left: 12px;'>TRANSFER_IN_CANCEL</strong> - Request to cancel a domain transfer via POST /v2/customers/{customerId}/domains/{domain}/transferInCancel</li><li><strong style='margin-left: 12px;'>TRANSFER_OUT</strong> - A domain transfer out request is in progress.</li><li><strong style='margin-left: 12px;'>TRANSFER_OUT_ACCEPT</strong> - Request to accept a transfer out request for a domain via POST /v2/customers/{customerId}/domains/{domain}/transferOutAccept</li><li><strong style='margin-left: 12px;'>TRANSFER_OUT_REJECT</strong> - Request to reject a transfer out request for a domain via POST /v2/customers/{customerId}/domains/{domain}/transferOutReject</li><li><strong style='margin-left: 12px;'>TRANSFER_OUT_REQUESTED</strong> - Request to transfer out for a domain (.de) via POST /v2/customers/{customerId}/domains/{domain}/transferOut</li><li><strong style='margin-left: 12px;'>TRANSIT</strong> - Request to transit a de or at domain at the registry via POST /v2/customers/{customerId}/domains/{domain}/transit</li></ul>",
    )


class DomainDetailV2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    actions: Optional[List[Action]] = Field(
        None, description='List of current actions in progress for this domain'
    )
    authCode: str = Field(
        ..., description='Authorization code for transferring the Domain'
    )
    contacts: DomainContactsV2
    createdAt: str = Field(
        ..., description='Date and time when this domain was created'
    )
    deletedAt: Optional[str] = Field(
        None, description='Date and time when this domain was deleted'
    )
    dnssecRecords: Optional[List[DomainDnssec]] = Field(
        None, description='List of active DNSSEC records for this domain'
    )
    domain: str = Field(..., description='Name of the domain')
    domainId: str = Field(..., description='Unique identifier for this Domain')
    expirationProtected: bool = Field(
        ..., description='Whether or not the domain is protected from expiration'
    )
    expiresAt: Optional[str] = Field(
        None, description='Date and time when this domain will expire'
    )
    holdRegistrar: bool = Field(
        ..., description='Whether or not the domain is on-hold by the registrar'
    )
    hostnames: Optional[List[str]] = Field(
        None, description='Hostnames owned by the domain'
    )
    locked: bool = Field(
        ..., description='Whether or not the domain is locked to prevent transfers'
    )
    modifiedAt: Optional[str] = Field(
        None, description='Date and time when this domain was last modified'
    )
    nameServers: List[str] = Field(
        ..., description='Fully-qualified domain names for DNS servers'
    )
    privacy: bool = Field(
        ..., description='Whether or not the domain has privacy protection'
    )
    registrarCreatedAt: Optional[str] = Field(
        None, description='Date and time when this domain was created by the registrar'
    )
    registryStatusCodes: Optional[List[RegistryStatusCode]] = Field(
        None,
        description="The current registry status codes of the domain<br/><ul><li><strong style='margin-left: 12px;'>ADD_PERIOD</strong> - This grace period is provided after the initial registration of a domain name.</li><li><strong style='margin-left: 12px;'>AUTO_RENEW_PERIOD</strong> - This grace period is provided after a domain name registration period expires and is extended (renewed) automatically by the registry.</li><li><strong style='margin-left: 12px;'>CLIENT_DELETE_PROHIBITED</strong> - This status code tells your domain's registry to reject requests to delete the domain.</li><li><strong style='margin-left: 12px;'>CLIENT_HOLD</strong> - This status code tells your domain's registry to not activate your domain in the DNS and as a consequence, it will not resolve.</li><li><strong style='margin-left: 12px;'>CLIENT_RENEW_PROHIBITED</strong> - This status code tells your domain's registry to reject requests to renew your domain.</li><li><strong style='margin-left: 12px;'>CLIENT_TRANSFER_PROHIBITED</strong> - This status code tells your domain's registry to reject requests to transfer the domain from your current registrar to another.</li><li><strong style='margin-left: 12px;'>CLIENT_UPDATE_PROHIBITED</strong> - This status code tells your domain's registry to reject requests to update the domain.</li><li><strong style='margin-left: 12px;'>INACTIVE</strong> - This status code indicates that delegation information (name servers) has not been associated with your domain.</li><li><strong style='margin-left: 12px;'>OK</strong> - This is the standard status for a domain, meaning it has no pending operations or prohibitions.</li><li><strong style='margin-left: 12px;'>PENDING_CREATE</strong> - This status code indicates that a request to create your domain has been received and is being processed.</li><li><strong style='margin-left: 12px;'>PENDING_DELETE</strong> - This status code indicates that the domain is either in a redemption period if combined with either REDEMPTION_PERIOD or PENDING_RESTORE, if not combined with these, then indicates that the redemption period for the domain has ended and domain will be be purged and dropped from the registry database.</li><li><strong style='margin-left: 12px;'>PENDING_RENEW</strong> - This status code indicates that a request to renew your domain has been received and is being processed.</li><li><strong style='margin-left: 12px;'>PENDING_RESTORE</strong> - This status code indicates that your registrar has asked the registry to restore your domain that was in REDEMPTION_PERIOD status</li><li><strong style='margin-left: 12px;'>PENDING_TRANSFER</strong> - This status code indicates that a request to transfer your domain to a new registrar has been received and is being processed.</li><li><strong style='margin-left: 12px;'>PENDING_UPDATE</strong> - This status code indicates that a request to update your domain has been received and is being processed.</li><li><strong style='margin-left: 12px;'>REDEMPTION_PERIOD</strong> - This status code indicates that your registrar has asked the registry to delete your domain.</li><li><strong style='margin-left: 12px;'>RENEW_PERIOD</strong> - This grace period is provided after a domain name registration period is explicitly extended (renewed) by the registrar.</li><li><strong style='margin-left: 12px;'>SERVER_DELETE_PROHIBITED</strong> - This status code prevents your domain from being deleted. </li><li><strong style='margin-left: 12px;'>SERVER_HOLD</strong> - This status code is set by your domain's Registry Operator. Your domain is not activated in the DNS.</li><li><strong style='margin-left: 12px;'>SERVER_RENEW_PROHIBITED</strong> - This status code indicates your domain's Registry Operator will not allow your registrar to renew your domain.</li><li><strong style='margin-left: 12px;'>SERVER_TRANSFER_PROHIBITED</strong> - This status code prevents your domain from being transferred from your current registrar to another. </li><li><strong style='margin-left: 12px;'>SERVER_UPDATE_PROHIBITED</strong> - This status code locks your domain preventing it from being updated.</li><li><strong style='margin-left: 12px;'>TRANSFER_PERIOD</strong> - This grace period is provided after the successful transfer of a domain name from one registrar to another. </li></ul>",
    )
    renewAuto: bool = Field(
        ...,
        description='Whether or not the domain is configured to automatically renew',
    )
    renewDeadline: str = Field(..., description='Date the domain must renew on')
    renewal: Optional[RenewalDetails] = None
    status: Status1 = Field(
        ...,
        description="The current status of the domain<br/><ul><li><strong style='margin-left: 12px;'>ACTIVE</strong> - Domain has been registered and is active.</li><li><strong style='margin-left: 12px;'>CANCELLED</strong> - Domain has been cancelled by the user or system, and is not be reclaimable.</li><li><strong style='margin-left: 12px;'>DELETED_REDEEMABLE</strong> - Domain is deleted but is redeemable.</li><li><strong style='margin-left: 12px;'>EXPIRED</strong> - Domain has expired.</li><li><strong style='margin-left: 12px;'>FAILED</strong> - Domain registration or transfer error.</li><li><strong style='margin-left: 12px;'>LOCKED_REGISTRAR</strong> - Domain is locked at the registrar - this is usually the result of a spam, abuse, etc.</li><li><strong style='margin-left: 12px;'>PARKED</strong> - Domain has been parked.</li><li><strong style='margin-left: 12px;'>HELD_REGISTRAR</strong> - Domain is held at the registrar and cannot be transferred or modified - this is usually the result of a dispute.</li><li><strong style='margin-left: 12px;'>OWNERSHIP_CHANGED</strong> - Domain has been moved to another account.</li><li><strong style='margin-left: 12px;'>PENDING_TRANSFER</strong> - Domain transfer has been requested and is pending the transfer process.</li><li><strong style='margin-left: 12px;'>PENDING_REGISTRATION</strong> - Domain is pending setup at the registry.</li><li><strong style='margin-left: 12px;'>REPOSSESSED</strong> - Domain has been confiscated - this is usually the result of a chargeback, fraud, abuse, etc.).</li><li><strong style='margin-left: 12px;'>SUSPENDED</strong> - Domain is in violation and has been suspended.</li><li><strong style='margin-left: 12px;'>TRANSFERRED</strong> - Domain has been transferred to another registrar.</li></ul>",
    )
    subaccountId: Optional[str] = Field(
        None, description='Reseller subaccount shopperid who can manage the domain'
    )
    transferAwayEligibleAt: Optional[str] = Field(
        None, description='Date and time when this domain is eligible to transfer'
    )
    transferProtected: bool = Field(
        ..., description='Whether or not the domain is protected from transfer'
    )
    verifications: Optional[VerificationsDomainV2] = None


class V2CustomersCustomerIdDomainsDomainActionsGetResponse(RootModel[List[Action]]):
    root: List[Action]


JsonSchema.model_rebuild()
